package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.ovp.entities.Commisner;
import Domain.Voter.Voter;
import javax.faces.bean.SessionScoped;
import com.ovp.entities.Commisner;

public final class home1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList<String>(2);
    _jspx_dependants.add("/bootstrap/js/bootstrap.js");
    _jspx_dependants.add("/Header1.jsp");
  }

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("        <link href=\"bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("        <script src=\"bootstrap/js/jquery.js\"></script>\n");
      out.write("\n");
      out.write("        <script >\n");
      out.write("            ");
      out.write("/*!\r\n");
      out.write(" * Bootstrap v3.3.6 (http://getbootstrap.com)\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under the MIT license\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("if (typeof jQuery === 'undefined') {\r\n");
      out.write("  throw new Error('Bootstrap\\'s JavaScript requires jQuery')\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("  var version = $.fn.jquery.split(' ')[0].split('.')\r\n");
      out.write("  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {\r\n");
      out.write("    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')\r\n");
      out.write("  }\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: transition.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#transitions\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\r\n");
      out.write("  // ============================================================\r\n");
      out.write("\r\n");
      out.write("  function transitionEnd() {\r\n");
      out.write("    var el = document.createElement('bootstrap')\r\n");
      out.write("\r\n");
      out.write("    var transEndEventNames = {\r\n");
      out.write("      WebkitTransition : 'webkitTransitionEnd',\r\n");
      out.write("      MozTransition    : 'transitionend',\r\n");
      out.write("      OTransition      : 'oTransitionEnd otransitionend',\r\n");
      out.write("      transition       : 'transitionend'\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (var name in transEndEventNames) {\r\n");
      out.write("      if (el.style[name] !== undefined) {\r\n");
      out.write("        return { end: transEndEventNames[name] }\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false // explicit for ie8 (  ._.)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // http://blog.alexmaccaw.com/css-transitions\r\n");
      out.write("  $.fn.emulateTransitionEnd = function (duration) {\r\n");
      out.write("    var called = false\r\n");
      out.write("    var $el = this\r\n");
      out.write("    $(this).one('bsTransitionEnd', function () { called = true })\r\n");
      out.write("    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\r\n");
      out.write("    setTimeout(callback, duration)\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(function () {\r\n");
      out.write("    $.support.transition = transitionEnd()\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return\r\n");
      out.write("\r\n");
      out.write("    $.event.special.bsTransitionEnd = {\r\n");
      out.write("      bindType: $.support.transition.end,\r\n");
      out.write("      delegateType: $.support.transition.end,\r\n");
      out.write("      handle: function (e) {\r\n");
      out.write("        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: alert.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#alerts\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // ALERT CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var dismiss = '[data-dismiss=\"alert\"]'\r\n");
      out.write("  var Alert   = function (el) {\r\n");
      out.write("    $(el).on('click', dismiss, this.close)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Alert.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Alert.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Alert.prototype.close = function (e) {\r\n");
      out.write("    var $this    = $(this)\r\n");
      out.write("    var selector = $this.attr('data-target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var $parent = $(selector)\r\n");
      out.write("\r\n");
      out.write("    if (e) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    if (!$parent.length) {\r\n");
      out.write("      $parent = $this.closest('.alert')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $parent.trigger(e = $.Event('close.bs.alert'))\r\n");
      out.write("\r\n");
      out.write("    if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    $parent.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("    function removeElement() {\r\n");
      out.write("      // detach from parent, fire event then clean up data\r\n");
      out.write("      $parent.detach().trigger('closed.bs.alert').remove()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && $parent.hasClass('fade') ?\r\n");
      out.write("      $parent\r\n");
      out.write("        .one('bsTransitionEnd', removeElement)\r\n");
      out.write("        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\r\n");
      out.write("      removeElement()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.alert')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.alert', (data = new Alert(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option].call($this)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.alert\r\n");
      out.write("\r\n");
      out.write("  $.fn.alert             = Plugin\r\n");
      out.write("  $.fn.alert.Constructor = Alert\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.alert.noConflict = function () {\r\n");
      out.write("    $.fn.alert = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: button.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#buttons\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // BUTTON PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ==============================\r\n");
      out.write("\r\n");
      out.write("  var Button = function (element, options) {\r\n");
      out.write("    this.$element  = $(element)\r\n");
      out.write("    this.options   = $.extend({}, Button.DEFAULTS, options)\r\n");
      out.write("    this.isLoading = false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Button.DEFAULTS = {\r\n");
      out.write("    loadingText: 'loading...'\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.prototype.setState = function (state) {\r\n");
      out.write("    var d    = 'disabled'\r\n");
      out.write("    var $el  = this.$element\r\n");
      out.write("    var val  = $el.is('input') ? 'val' : 'html'\r\n");
      out.write("    var data = $el.data()\r\n");
      out.write("\r\n");
      out.write("    state += 'Text'\r\n");
      out.write("\r\n");
      out.write("    if (data.resetText == null) $el.data('resetText', $el[val]())\r\n");
      out.write("\r\n");
      out.write("    // push to event loop to allow forms to submit\r\n");
      out.write("    setTimeout($.proxy(function () {\r\n");
      out.write("      $el[val](data[state] == null ? this.options[state] : data[state])\r\n");
      out.write("\r\n");
      out.write("      if (state == 'loadingText') {\r\n");
      out.write("        this.isLoading = true\r\n");
      out.write("        $el.addClass(d).attr(d, d)\r\n");
      out.write("      } else if (this.isLoading) {\r\n");
      out.write("        this.isLoading = false\r\n");
      out.write("        $el.removeClass(d).removeAttr(d)\r\n");
      out.write("      }\r\n");
      out.write("    }, this), 0)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.prototype.toggle = function () {\r\n");
      out.write("    var changed = true\r\n");
      out.write("    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\r\n");
      out.write("\r\n");
      out.write("    if ($parent.length) {\r\n");
      out.write("      var $input = this.$element.find('input')\r\n");
      out.write("      if ($input.prop('type') == 'radio') {\r\n");
      out.write("        if ($input.prop('checked')) changed = false\r\n");
      out.write("        $parent.find('.active').removeClass('active')\r\n");
      out.write("        this.$element.addClass('active')\r\n");
      out.write("      } else if ($input.prop('type') == 'checkbox') {\r\n");
      out.write("        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\r\n");
      out.write("        this.$element.toggleClass('active')\r\n");
      out.write("      }\r\n");
      out.write("      $input.prop('checked', this.$element.hasClass('active'))\r\n");
      out.write("      if (changed) $input.trigger('change')\r\n");
      out.write("    } else {\r\n");
      out.write("      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\r\n");
      out.write("      this.$element.toggleClass('active')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON PLUGIN DEFINITION\r\n");
      out.write("  // ========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.button')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.button', (data = new Button(this, options)))\r\n");
      out.write("\r\n");
      out.write("      if (option == 'toggle') data.toggle()\r\n");
      out.write("      else if (option) data.setState(option)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.button\r\n");
      out.write("\r\n");
      out.write("  $.fn.button             = Plugin\r\n");
      out.write("  $.fn.button.Constructor = Button\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON NO CONFLICT\r\n");
      out.write("  // ==================\r\n");
      out.write("\r\n");
      out.write("  $.fn.button.noConflict = function () {\r\n");
      out.write("    $.fn.button = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON DATA-API\r\n");
      out.write("  // ===============\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\r\n");
      out.write("      var $btn = $(e.target)\r\n");
      out.write("      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')\r\n");
      out.write("      Plugin.call($btn, 'toggle')\r\n");
      out.write("      if (!($(e.target).is('input[type=\"radio\"]') || $(e.target).is('input[type=\"checkbox\"]'))) e.preventDefault()\r\n");
      out.write("    })\r\n");
      out.write("    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\r\n");
      out.write("      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: carousel.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#carousel\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL CLASS DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  var Carousel = function (element, options) {\r\n");
      out.write("    this.$element    = $(element)\r\n");
      out.write("    this.$indicators = this.$element.find('.carousel-indicators')\r\n");
      out.write("    this.options     = options\r\n");
      out.write("    this.paused      = null\r\n");
      out.write("    this.sliding     = null\r\n");
      out.write("    this.interval    = null\r\n");
      out.write("    this.$active     = null\r\n");
      out.write("    this.$items      = null\r\n");
      out.write("\r\n");
      out.write("    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\r\n");
      out.write("\r\n");
      out.write("    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\r\n");
      out.write("      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\r\n");
      out.write("      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Carousel.TRANSITION_DURATION = 600\r\n");
      out.write("\r\n");
      out.write("  Carousel.DEFAULTS = {\r\n");
      out.write("    interval: 5000,\r\n");
      out.write("    pause: 'hover',\r\n");
      out.write("    wrap: true,\r\n");
      out.write("    keyboard: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.keydown = function (e) {\r\n");
      out.write("    if (/input|textarea/i.test(e.target.tagName)) return\r\n");
      out.write("    switch (e.which) {\r\n");
      out.write("      case 37: this.prev(); break\r\n");
      out.write("      case 39: this.next(); break\r\n");
      out.write("      default: return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.cycle = function (e) {\r\n");
      out.write("    e || (this.paused = false)\r\n");
      out.write("\r\n");
      out.write("    this.interval && clearInterval(this.interval)\r\n");
      out.write("\r\n");
      out.write("    this.options.interval\r\n");
      out.write("      && !this.paused\r\n");
      out.write("      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.getItemIndex = function (item) {\r\n");
      out.write("    this.$items = item.parent().children('.item')\r\n");
      out.write("    return this.$items.index(item || this.$active)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.getItemForDirection = function (direction, active) {\r\n");
      out.write("    var activeIndex = this.getItemIndex(active)\r\n");
      out.write("    var willWrap = (direction == 'prev' && activeIndex === 0)\r\n");
      out.write("                || (direction == 'next' && activeIndex == (this.$items.length - 1))\r\n");
      out.write("    if (willWrap && !this.options.wrap) return active\r\n");
      out.write("    var delta = direction == 'prev' ? -1 : 1\r\n");
      out.write("    var itemIndex = (activeIndex + delta) % this.$items.length\r\n");
      out.write("    return this.$items.eq(itemIndex)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.to = function (pos) {\r\n");
      out.write("    var that        = this\r\n");
      out.write("    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\r\n");
      out.write("\r\n");
      out.write("    if (pos > (this.$items.length - 1) || pos < 0) return\r\n");
      out.write("\r\n");
      out.write("    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\r\n");
      out.write("    if (activeIndex == pos) return this.pause().cycle()\r\n");
      out.write("\r\n");
      out.write("    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.pause = function (e) {\r\n");
      out.write("    e || (this.paused = true)\r\n");
      out.write("\r\n");
      out.write("    if (this.$element.find('.next, .prev').length && $.support.transition) {\r\n");
      out.write("      this.$element.trigger($.support.transition.end)\r\n");
      out.write("      this.cycle(true)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.interval = clearInterval(this.interval)\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.next = function () {\r\n");
      out.write("    if (this.sliding) return\r\n");
      out.write("    return this.slide('next')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.prev = function () {\r\n");
      out.write("    if (this.sliding) return\r\n");
      out.write("    return this.slide('prev')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.slide = function (type, next) {\r\n");
      out.write("    var $active   = this.$element.find('.item.active')\r\n");
      out.write("    var $next     = next || this.getItemForDirection(type, $active)\r\n");
      out.write("    var isCycling = this.interval\r\n");
      out.write("    var direction = type == 'next' ? 'left' : 'right'\r\n");
      out.write("    var that      = this\r\n");
      out.write("\r\n");
      out.write("    if ($next.hasClass('active')) return (this.sliding = false)\r\n");
      out.write("\r\n");
      out.write("    var relatedTarget = $next[0]\r\n");
      out.write("    var slideEvent = $.Event('slide.bs.carousel', {\r\n");
      out.write("      relatedTarget: relatedTarget,\r\n");
      out.write("      direction: direction\r\n");
      out.write("    })\r\n");
      out.write("    this.$element.trigger(slideEvent)\r\n");
      out.write("    if (slideEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.sliding = true\r\n");
      out.write("\r\n");
      out.write("    isCycling && this.pause()\r\n");
      out.write("\r\n");
      out.write("    if (this.$indicators.length) {\r\n");
      out.write("      this.$indicators.find('.active').removeClass('active')\r\n");
      out.write("      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\r\n");
      out.write("      $nextIndicator && $nextIndicator.addClass('active')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\r\n");
      out.write("    if ($.support.transition && this.$element.hasClass('slide')) {\r\n");
      out.write("      $next.addClass(type)\r\n");
      out.write("      $next[0].offsetWidth // force reflow\r\n");
      out.write("      $active.addClass(direction)\r\n");
      out.write("      $next.addClass(direction)\r\n");
      out.write("      $active\r\n");
      out.write("        .one('bsTransitionEnd', function () {\r\n");
      out.write("          $next.removeClass([type, direction].join(' ')).addClass('active')\r\n");
      out.write("          $active.removeClass(['active', direction].join(' '))\r\n");
      out.write("          that.sliding = false\r\n");
      out.write("          setTimeout(function () {\r\n");
      out.write("            that.$element.trigger(slidEvent)\r\n");
      out.write("          }, 0)\r\n");
      out.write("        })\r\n");
      out.write("        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\r\n");
      out.write("    } else {\r\n");
      out.write("      $active.removeClass('active')\r\n");
      out.write("      $next.addClass('active')\r\n");
      out.write("      this.sliding = false\r\n");
      out.write("      this.$element.trigger(slidEvent)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    isCycling && this.cycle()\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.carousel')\r\n");
      out.write("      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("      var action  = typeof option == 'string' ? option : options.slide\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\r\n");
      out.write("      if (typeof option == 'number') data.to(option)\r\n");
      out.write("      else if (action) data[action]()\r\n");
      out.write("      else if (options.interval) data.pause().cycle()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.carousel\r\n");
      out.write("\r\n");
      out.write("  $.fn.carousel             = Plugin\r\n");
      out.write("  $.fn.carousel.Constructor = Carousel\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.carousel.noConflict = function () {\r\n");
      out.write("    $.fn.carousel = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL DATA-API\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  var clickHandler = function (e) {\r\n");
      out.write("    var href\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\r\n");
      out.write("    if (!$target.hasClass('carousel')) return\r\n");
      out.write("    var options = $.extend({}, $target.data(), $this.data())\r\n");
      out.write("    var slideIndex = $this.attr('data-slide-to')\r\n");
      out.write("    if (slideIndex) options.interval = false\r\n");
      out.write("\r\n");
      out.write("    Plugin.call($target, options)\r\n");
      out.write("\r\n");
      out.write("    if (slideIndex) {\r\n");
      out.write("      $target.data('bs.carousel').to(slideIndex)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\r\n");
      out.write("    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load', function () {\r\n");
      out.write("    $('[data-ride=\"carousel\"]').each(function () {\r\n");
      out.write("      var $carousel = $(this)\r\n");
      out.write("      Plugin.call($carousel, $carousel.data())\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: collapse.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#collapse\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ================================\r\n");
      out.write("\r\n");
      out.write("  var Collapse = function (element, options) {\r\n");
      out.write("    this.$element      = $(element)\r\n");
      out.write("    this.options       = $.extend({}, Collapse.DEFAULTS, options)\r\n");
      out.write("    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\r\n");
      out.write("                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\r\n");
      out.write("    this.transitioning = null\r\n");
      out.write("\r\n");
      out.write("    if (this.options.parent) {\r\n");
      out.write("      this.$parent = this.getParent()\r\n");
      out.write("    } else {\r\n");
      out.write("      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (this.options.toggle) this.toggle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Collapse.TRANSITION_DURATION = 350\r\n");
      out.write("\r\n");
      out.write("  Collapse.DEFAULTS = {\r\n");
      out.write("    toggle: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.dimension = function () {\r\n");
      out.write("    var hasWidth = this.$element.hasClass('width')\r\n");
      out.write("    return hasWidth ? 'width' : 'height'\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.show = function () {\r\n");
      out.write("    if (this.transitioning || this.$element.hasClass('in')) return\r\n");
      out.write("\r\n");
      out.write("    var activesData\r\n");
      out.write("    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\r\n");
      out.write("\r\n");
      out.write("    if (actives && actives.length) {\r\n");
      out.write("      activesData = actives.data('bs.collapse')\r\n");
      out.write("      if (activesData && activesData.transitioning) return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var startEvent = $.Event('show.bs.collapse')\r\n");
      out.write("    this.$element.trigger(startEvent)\r\n");
      out.write("    if (startEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    if (actives && actives.length) {\r\n");
      out.write("      Plugin.call(actives, 'hide')\r\n");
      out.write("      activesData || actives.data('bs.collapse', null)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var dimension = this.dimension()\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .removeClass('collapse')\r\n");
      out.write("      .addClass('collapsing')[dimension](0)\r\n");
      out.write("      .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("    this.$trigger\r\n");
      out.write("      .removeClass('collapsed')\r\n");
      out.write("      .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("    this.transitioning = 1\r\n");
      out.write("\r\n");
      out.write("    var complete = function () {\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass('collapsing')\r\n");
      out.write("        .addClass('collapse in')[dimension]('')\r\n");
      out.write("      this.transitioning = 0\r\n");
      out.write("      this.$element\r\n");
      out.write("        .trigger('shown.bs.collapse')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return complete.call(this)\r\n");
      out.write("\r\n");
      out.write("    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .one('bsTransitionEnd', $.proxy(complete, this))\r\n");
      out.write("      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.hide = function () {\r\n");
      out.write("    if (this.transitioning || !this.$element.hasClass('in')) return\r\n");
      out.write("\r\n");
      out.write("    var startEvent = $.Event('hide.bs.collapse')\r\n");
      out.write("    this.$element.trigger(startEvent)\r\n");
      out.write("    if (startEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    var dimension = this.dimension()\r\n");
      out.write("\r\n");
      out.write("    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .addClass('collapsing')\r\n");
      out.write("      .removeClass('collapse in')\r\n");
      out.write("      .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("    this.$trigger\r\n");
      out.write("      .addClass('collapsed')\r\n");
      out.write("      .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("    this.transitioning = 1\r\n");
      out.write("\r\n");
      out.write("    var complete = function () {\r\n");
      out.write("      this.transitioning = 0\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass('collapsing')\r\n");
      out.write("        .addClass('collapse')\r\n");
      out.write("        .trigger('hidden.bs.collapse')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return complete.call(this)\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      [dimension](0)\r\n");
      out.write("      .one('bsTransitionEnd', $.proxy(complete, this))\r\n");
      out.write("      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.toggle = function () {\r\n");
      out.write("    this[this.$element.hasClass('in') ? 'hide' : 'show']()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.getParent = function () {\r\n");
      out.write("    return $(this.options.parent)\r\n");
      out.write("      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\r\n");
      out.write("      .each($.proxy(function (i, element) {\r\n");
      out.write("        var $element = $(element)\r\n");
      out.write("        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\r\n");
      out.write("      }, this))\r\n");
      out.write("      .end()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\r\n");
      out.write("    var isOpen = $element.hasClass('in')\r\n");
      out.write("\r\n");
      out.write("    $element.attr('aria-expanded', isOpen)\r\n");
      out.write("    $trigger\r\n");
      out.write("      .toggleClass('collapsed', !isOpen)\r\n");
      out.write("      .attr('aria-expanded', isOpen)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function getTargetFromTrigger($trigger) {\r\n");
      out.write("    var href\r\n");
      out.write("    var target = $trigger.attr('data-target')\r\n");
      out.write("      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\r\n");
      out.write("\r\n");
      out.write("    return $(target)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.collapse')\r\n");
      out.write("      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("\r\n");
      out.write("      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\r\n");
      out.write("      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.collapse\r\n");
      out.write("\r\n");
      out.write("  $.fn.collapse             = Plugin\r\n");
      out.write("  $.fn.collapse.Constructor = Collapse\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.collapse.noConflict = function () {\r\n");
      out.write("    $.fn.collapse = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE DATA-API\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("\r\n");
      out.write("    if (!$this.attr('data-target')) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    var $target = getTargetFromTrigger($this)\r\n");
      out.write("    var data    = $target.data('bs.collapse')\r\n");
      out.write("    var option  = data ? 'toggle' : $this.data()\r\n");
      out.write("\r\n");
      out.write("    Plugin.call($target, option)\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: dropdown.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#dropdowns\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN CLASS DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  var backdrop = '.dropdown-backdrop'\r\n");
      out.write("  var toggle   = '[data-toggle=\"dropdown\"]'\r\n");
      out.write("  var Dropdown = function (element) {\r\n");
      out.write("    $(element).on('click.bs.dropdown', this.toggle)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  function getParent($this) {\r\n");
      out.write("    var selector = $this.attr('data-target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var $parent = selector && $(selector)\r\n");
      out.write("\r\n");
      out.write("    return $parent && $parent.length ? $parent : $this.parent()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function clearMenus(e) {\r\n");
      out.write("    if (e && e.which === 3) return\r\n");
      out.write("    $(backdrop).remove()\r\n");
      out.write("    $(toggle).each(function () {\r\n");
      out.write("      var $this         = $(this)\r\n");
      out.write("      var $parent       = getParent($this)\r\n");
      out.write("      var relatedTarget = { relatedTarget: this }\r\n");
      out.write("\r\n");
      out.write("      if (!$parent.hasClass('open')) return\r\n");
      out.write("\r\n");
      out.write("      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\r\n");
      out.write("\r\n");
      out.write("      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      $this.attr('aria-expanded', 'false')\r\n");
      out.write("      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.prototype.toggle = function (e) {\r\n");
      out.write("    var $this = $(this)\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('.disabled, :disabled')) return\r\n");
      out.write("\r\n");
      out.write("    var $parent  = getParent($this)\r\n");
      out.write("    var isActive = $parent.hasClass('open')\r\n");
      out.write("\r\n");
      out.write("    clearMenus()\r\n");
      out.write("\r\n");
      out.write("    if (!isActive) {\r\n");
      out.write("      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\r\n");
      out.write("        // if mobile we use a backdrop because click events don't delegate\r\n");
      out.write("        $(document.createElement('div'))\r\n");
      out.write("          .addClass('dropdown-backdrop')\r\n");
      out.write("          .insertAfter($(this))\r\n");
      out.write("          .on('click', clearMenus)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      var relatedTarget = { relatedTarget: this }\r\n");
      out.write("      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      $this\r\n");
      out.write("        .trigger('focus')\r\n");
      out.write("        .attr('aria-expanded', 'true')\r\n");
      out.write("\r\n");
      out.write("      $parent\r\n");
      out.write("        .toggleClass('open')\r\n");
      out.write("        .trigger($.Event('shown.bs.dropdown', relatedTarget))\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.prototype.keydown = function (e) {\r\n");
      out.write("    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\r\n");
      out.write("\r\n");
      out.write("    var $this = $(this)\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("    e.stopPropagation()\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('.disabled, :disabled')) return\r\n");
      out.write("\r\n");
      out.write("    var $parent  = getParent($this)\r\n");
      out.write("    var isActive = $parent.hasClass('open')\r\n");
      out.write("\r\n");
      out.write("    if (!isActive && e.which != 27 || isActive && e.which == 27) {\r\n");
      out.write("      if (e.which == 27) $parent.find(toggle).trigger('focus')\r\n");
      out.write("      return $this.trigger('click')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var desc = ' li:not(.disabled):visible a'\r\n");
      out.write("    var $items = $parent.find('.dropdown-menu' + desc)\r\n");
      out.write("\r\n");
      out.write("    if (!$items.length) return\r\n");
      out.write("\r\n");
      out.write("    var index = $items.index(e.target)\r\n");
      out.write("\r\n");
      out.write("    if (e.which == 38 && index > 0)                 index--         // up\r\n");
      out.write("    if (e.which == 40 && index < $items.length - 1) index++         // down\r\n");
      out.write("    if (!~index)                                    index = 0\r\n");
      out.write("\r\n");
      out.write("    $items.eq(index).trigger('focus')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.dropdown')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option].call($this)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.dropdown\r\n");
      out.write("\r\n");
      out.write("  $.fn.dropdown             = Plugin\r\n");
      out.write("  $.fn.dropdown.Constructor = Dropdown\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.dropdown.noConflict = function () {\r\n");
      out.write("    $.fn.dropdown = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // APPLY TO STANDARD DROPDOWN ELEMENTS\r\n");
      out.write("  // ===================================\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.dropdown.data-api', clearMenus)\r\n");
      out.write("    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\r\n");
      out.write("    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\r\n");
      out.write("    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\r\n");
      out.write("    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: modal.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#modals\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // MODAL CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var Modal = function (element, options) {\r\n");
      out.write("    this.options             = options\r\n");
      out.write("    this.$body               = $(document.body)\r\n");
      out.write("    this.$element            = $(element)\r\n");
      out.write("    this.$dialog             = this.$element.find('.modal-dialog')\r\n");
      out.write("    this.$backdrop           = null\r\n");
      out.write("    this.isShown             = null\r\n");
      out.write("    this.originalBodyPad     = null\r\n");
      out.write("    this.scrollbarWidth      = 0\r\n");
      out.write("    this.ignoreBackdropClick = false\r\n");
      out.write("\r\n");
      out.write("    if (this.options.remote) {\r\n");
      out.write("      this.$element\r\n");
      out.write("        .find('.modal-content')\r\n");
      out.write("        .load(this.options.remote, $.proxy(function () {\r\n");
      out.write("          this.$element.trigger('loaded.bs.modal')\r\n");
      out.write("        }, this))\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Modal.TRANSITION_DURATION = 300\r\n");
      out.write("  Modal.BACKDROP_TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Modal.DEFAULTS = {\r\n");
      out.write("    backdrop: true,\r\n");
      out.write("    keyboard: true,\r\n");
      out.write("    show: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.toggle = function (_relatedTarget) {\r\n");
      out.write("    return this.isShown ? this.hide() : this.show(_relatedTarget)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.show = function (_relatedTarget) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (this.isShown || e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.isShown = true\r\n");
      out.write("\r\n");
      out.write("    this.checkScrollbar()\r\n");
      out.write("    this.setScrollbar()\r\n");
      out.write("    this.$body.addClass('modal-open')\r\n");
      out.write("\r\n");
      out.write("    this.escape()\r\n");
      out.write("    this.resize()\r\n");
      out.write("\r\n");
      out.write("    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\r\n");
      out.write("\r\n");
      out.write("    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\r\n");
      out.write("      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\r\n");
      out.write("        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    this.backdrop(function () {\r\n");
      out.write("      var transition = $.support.transition && that.$element.hasClass('fade')\r\n");
      out.write("\r\n");
      out.write("      if (!that.$element.parent().length) {\r\n");
      out.write("        that.$element.appendTo(that.$body) // don't move modals dom position\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      that.$element\r\n");
      out.write("        .show()\r\n");
      out.write("        .scrollTop(0)\r\n");
      out.write("\r\n");
      out.write("      that.adjustDialog()\r\n");
      out.write("\r\n");
      out.write("      if (transition) {\r\n");
      out.write("        that.$element[0].offsetWidth // force reflow\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      that.$element.addClass('in')\r\n");
      out.write("\r\n");
      out.write("      that.enforceFocus()\r\n");
      out.write("\r\n");
      out.write("      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\r\n");
      out.write("\r\n");
      out.write("      transition ?\r\n");
      out.write("        that.$dialog // wait for modal to slide in\r\n");
      out.write("          .one('bsTransitionEnd', function () {\r\n");
      out.write("            that.$element.trigger('focus').trigger(e)\r\n");
      out.write("          })\r\n");
      out.write("          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\r\n");
      out.write("        that.$element.trigger('focus').trigger(e)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.hide = function (e) {\r\n");
      out.write("    if (e) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    e = $.Event('hide.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (!this.isShown || e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.isShown = false\r\n");
      out.write("\r\n");
      out.write("    this.escape()\r\n");
      out.write("    this.resize()\r\n");
      out.write("\r\n");
      out.write("    $(document).off('focusin.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .removeClass('in')\r\n");
      out.write("      .off('click.dismiss.bs.modal')\r\n");
      out.write("      .off('mouseup.dismiss.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$dialog.off('mousedown.dismiss.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && this.$element.hasClass('fade') ?\r\n");
      out.write("      this.$element\r\n");
      out.write("        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\r\n");
      out.write("        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\r\n");
      out.write("      this.hideModal()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.enforceFocus = function () {\r\n");
      out.write("    $(document)\r\n");
      out.write("      .off('focusin.bs.modal') // guard against infinite focus loop\r\n");
      out.write("      .on('focusin.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\r\n");
      out.write("          this.$element.trigger('focus')\r\n");
      out.write("        }\r\n");
      out.write("      }, this))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.escape = function () {\r\n");
      out.write("    if (this.isShown && this.options.keyboard) {\r\n");
      out.write("      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        e.which == 27 && this.hide()\r\n");
      out.write("      }, this))\r\n");
      out.write("    } else if (!this.isShown) {\r\n");
      out.write("      this.$element.off('keydown.dismiss.bs.modal')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resize = function () {\r\n");
      out.write("    if (this.isShown) {\r\n");
      out.write("      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\r\n");
      out.write("    } else {\r\n");
      out.write("      $(window).off('resize.bs.modal')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.hideModal = function () {\r\n");
      out.write("    var that = this\r\n");
      out.write("    this.$element.hide()\r\n");
      out.write("    this.backdrop(function () {\r\n");
      out.write("      that.$body.removeClass('modal-open')\r\n");
      out.write("      that.resetAdjustments()\r\n");
      out.write("      that.resetScrollbar()\r\n");
      out.write("      that.$element.trigger('hidden.bs.modal')\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.removeBackdrop = function () {\r\n");
      out.write("    this.$backdrop && this.$backdrop.remove()\r\n");
      out.write("    this.$backdrop = null\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.backdrop = function (callback) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var animate = this.$element.hasClass('fade') ? 'fade' : ''\r\n");
      out.write("\r\n");
      out.write("    if (this.isShown && this.options.backdrop) {\r\n");
      out.write("      var doAnimate = $.support.transition && animate\r\n");
      out.write("\r\n");
      out.write("      this.$backdrop = $(document.createElement('div'))\r\n");
      out.write("        .addClass('modal-backdrop ' + animate)\r\n");
      out.write("        .appendTo(this.$body)\r\n");
      out.write("\r\n");
      out.write("      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        if (this.ignoreBackdropClick) {\r\n");
      out.write("          this.ignoreBackdropClick = false\r\n");
      out.write("          return\r\n");
      out.write("        }\r\n");
      out.write("        if (e.target !== e.currentTarget) return\r\n");
      out.write("        this.options.backdrop == 'static'\r\n");
      out.write("          ? this.$element[0].focus()\r\n");
      out.write("          : this.hide()\r\n");
      out.write("      }, this))\r\n");
      out.write("\r\n");
      out.write("      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\r\n");
      out.write("\r\n");
      out.write("      this.$backdrop.addClass('in')\r\n");
      out.write("\r\n");
      out.write("      if (!callback) return\r\n");
      out.write("\r\n");
      out.write("      doAnimate ?\r\n");
      out.write("        this.$backdrop\r\n");
      out.write("          .one('bsTransitionEnd', callback)\r\n");
      out.write("          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\r\n");
      out.write("        callback()\r\n");
      out.write("\r\n");
      out.write("    } else if (!this.isShown && this.$backdrop) {\r\n");
      out.write("      this.$backdrop.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("      var callbackRemove = function () {\r\n");
      out.write("        that.removeBackdrop()\r\n");
      out.write("        callback && callback()\r\n");
      out.write("      }\r\n");
      out.write("      $.support.transition && this.$element.hasClass('fade') ?\r\n");
      out.write("        this.$backdrop\r\n");
      out.write("          .one('bsTransitionEnd', callbackRemove)\r\n");
      out.write("          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\r\n");
      out.write("        callbackRemove()\r\n");
      out.write("\r\n");
      out.write("    } else if (callback) {\r\n");
      out.write("      callback()\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // these following methods are used to handle overflowing modals\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.handleUpdate = function () {\r\n");
      out.write("    this.adjustDialog()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.adjustDialog = function () {\r\n");
      out.write("    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\r\n");
      out.write("\r\n");
      out.write("    this.$element.css({\r\n");
      out.write("      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\r\n");
      out.write("      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resetAdjustments = function () {\r\n");
      out.write("    this.$element.css({\r\n");
      out.write("      paddingLeft: '',\r\n");
      out.write("      paddingRight: ''\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.checkScrollbar = function () {\r\n");
      out.write("    var fullWindowWidth = window.innerWidth\r\n");
      out.write("    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\r\n");
      out.write("      var documentElementRect = document.documentElement.getBoundingClientRect()\r\n");
      out.write("      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\r\n");
      out.write("    }\r\n");
      out.write("    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\r\n");
      out.write("    this.scrollbarWidth = this.measureScrollbar()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.setScrollbar = function () {\r\n");
      out.write("    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\r\n");
      out.write("    this.originalBodyPad = document.body.style.paddingRight || ''\r\n");
      out.write("    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resetScrollbar = function () {\r\n");
      out.write("    this.$body.css('padding-right', this.originalBodyPad)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.measureScrollbar = function () { // thx walsh\r\n");
      out.write("    var scrollDiv = document.createElement('div')\r\n");
      out.write("    scrollDiv.className = 'modal-scrollbar-measure'\r\n");
      out.write("    this.$body.append(scrollDiv)\r\n");
      out.write("    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\r\n");
      out.write("    this.$body[0].removeChild(scrollDiv)\r\n");
      out.write("    return scrollbarWidth\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option, _relatedTarget) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.modal')\r\n");
      out.write("      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option](_relatedTarget)\r\n");
      out.write("      else if (options.show) data.show(_relatedTarget)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.modal\r\n");
      out.write("\r\n");
      out.write("  $.fn.modal             = Plugin\r\n");
      out.write("  $.fn.modal.Constructor = Modal\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.modal.noConflict = function () {\r\n");
      out.write("    $.fn.modal = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("    var href    = $this.attr('href')\r\n");
      out.write("    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\r\n");
      out.write("    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('a')) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    $target.one('show.bs.modal', function (showEvent) {\r\n");
      out.write("      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\r\n");
      out.write("      $target.one('hidden.bs.modal', function () {\r\n");
      out.write("        $this.is(':visible') && $this.trigger('focus')\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("    Plugin.call($target, option, this)\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: tooltip.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#tooltip\r\n");
      out.write(" * Inspired by the original jQuery.tipsy by Jason Frame\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ===============================\r\n");
      out.write("\r\n");
      out.write("  var Tooltip = function (element, options) {\r\n");
      out.write("    this.type       = null\r\n");
      out.write("    this.options    = null\r\n");
      out.write("    this.enabled    = null\r\n");
      out.write("    this.timeout    = null\r\n");
      out.write("    this.hoverState = null\r\n");
      out.write("    this.$element   = null\r\n");
      out.write("    this.inState    = null\r\n");
      out.write("\r\n");
      out.write("    this.init('tooltip', element, options)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Tooltip.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Tooltip.DEFAULTS = {\r\n");
      out.write("    animation: true,\r\n");
      out.write("    placement: 'top',\r\n");
      out.write("    selector: false,\r\n");
      out.write("    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n");
      out.write("    trigger: 'hover focus',\r\n");
      out.write("    title: '',\r\n");
      out.write("    delay: 0,\r\n");
      out.write("    html: false,\r\n");
      out.write("    container: false,\r\n");
      out.write("    viewport: {\r\n");
      out.write("      selector: 'body',\r\n");
      out.write("      padding: 0\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.init = function (type, element, options) {\r\n");
      out.write("    this.enabled   = true\r\n");
      out.write("    this.type      = type\r\n");
      out.write("    this.$element  = $(element)\r\n");
      out.write("    this.options   = this.getOptions(options)\r\n");
      out.write("    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\r\n");
      out.write("    this.inState   = { click: false, hover: false, focus: false }\r\n");
      out.write("\r\n");
      out.write("    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\r\n");
      out.write("      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var triggers = this.options.trigger.split(' ')\r\n");
      out.write("\r\n");
      out.write("    for (var i = triggers.length; i--;) {\r\n");
      out.write("      var trigger = triggers[i]\r\n");
      out.write("\r\n");
      out.write("      if (trigger == 'click') {\r\n");
      out.write("        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\r\n");
      out.write("      } else if (trigger != 'manual') {\r\n");
      out.write("        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\r\n");
      out.write("        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\r\n");
      out.write("\r\n");
      out.write("        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\r\n");
      out.write("        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.options.selector ?\r\n");
      out.write("      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\r\n");
      out.write("      this.fixTitle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getDefaults = function () {\r\n");
      out.write("    return Tooltip.DEFAULTS\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getOptions = function (options) {\r\n");
      out.write("    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\r\n");
      out.write("\r\n");
      out.write("    if (options.delay && typeof options.delay == 'number') {\r\n");
      out.write("      options.delay = {\r\n");
      out.write("        show: options.delay,\r\n");
      out.write("        hide: options.delay\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return options\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getDelegateOptions = function () {\r\n");
      out.write("    var options  = {}\r\n");
      out.write("    var defaults = this.getDefaults()\r\n");
      out.write("\r\n");
      out.write("    this._options && $.each(this._options, function (key, value) {\r\n");
      out.write("      if (defaults[key] != value) options[key] = value\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    return options\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.enter = function (obj) {\r\n");
      out.write("    var self = obj instanceof this.constructor ?\r\n");
      out.write("      obj : $(obj.currentTarget).data('bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (!self) {\r\n");
      out.write("      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\r\n");
      out.write("      $(obj.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (obj instanceof $.Event) {\r\n");
      out.write("      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (self.tip().hasClass('in') || self.hoverState == 'in') {\r\n");
      out.write("      self.hoverState = 'in'\r\n");
      out.write("      return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    clearTimeout(self.timeout)\r\n");
      out.write("\r\n");
      out.write("    self.hoverState = 'in'\r\n");
      out.write("\r\n");
      out.write("    if (!self.options.delay || !self.options.delay.show) return self.show()\r\n");
      out.write("\r\n");
      out.write("    self.timeout = setTimeout(function () {\r\n");
      out.write("      if (self.hoverState == 'in') self.show()\r\n");
      out.write("    }, self.options.delay.show)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.isInStateTrue = function () {\r\n");
      out.write("    for (var key in this.inState) {\r\n");
      out.write("      if (this.inState[key]) return true\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.leave = function (obj) {\r\n");
      out.write("    var self = obj instanceof this.constructor ?\r\n");
      out.write("      obj : $(obj.currentTarget).data('bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (!self) {\r\n");
      out.write("      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\r\n");
      out.write("      $(obj.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (obj instanceof $.Event) {\r\n");
      out.write("      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (self.isInStateTrue()) return\r\n");
      out.write("\r\n");
      out.write("    clearTimeout(self.timeout)\r\n");
      out.write("\r\n");
      out.write("    self.hoverState = 'out'\r\n");
      out.write("\r\n");
      out.write("    if (!self.options.delay || !self.options.delay.hide) return self.hide()\r\n");
      out.write("\r\n");
      out.write("    self.timeout = setTimeout(function () {\r\n");
      out.write("      if (self.hoverState == 'out') self.hide()\r\n");
      out.write("    }, self.options.delay.hide)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.show = function () {\r\n");
      out.write("    var e = $.Event('show.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (this.hasContent() && this.enabled) {\r\n");
      out.write("      this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\r\n");
      out.write("      if (e.isDefaultPrevented() || !inDom) return\r\n");
      out.write("      var that = this\r\n");
      out.write("\r\n");
      out.write("      var $tip = this.tip()\r\n");
      out.write("\r\n");
      out.write("      var tipId = this.getUID(this.type)\r\n");
      out.write("\r\n");
      out.write("      this.setContent()\r\n");
      out.write("      $tip.attr('id', tipId)\r\n");
      out.write("      this.$element.attr('aria-describedby', tipId)\r\n");
      out.write("\r\n");
      out.write("      if (this.options.animation) $tip.addClass('fade')\r\n");
      out.write("\r\n");
      out.write("      var placement = typeof this.options.placement == 'function' ?\r\n");
      out.write("        this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n");
      out.write("        this.options.placement\r\n");
      out.write("\r\n");
      out.write("      var autoToken = /\\s?auto?\\s?/i\r\n");
      out.write("      var autoPlace = autoToken.test(placement)\r\n");
      out.write("      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\r\n");
      out.write("\r\n");
      out.write("      $tip\r\n");
      out.write("        .detach()\r\n");
      out.write("        .css({ top: 0, left: 0, display: 'block' })\r\n");
      out.write("        .addClass(placement)\r\n");
      out.write("        .data('bs.' + this.type, this)\r\n");
      out.write("\r\n");
      out.write("      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\r\n");
      out.write("      this.$element.trigger('inserted.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("      var pos          = this.getPosition()\r\n");
      out.write("      var actualWidth  = $tip[0].offsetWidth\r\n");
      out.write("      var actualHeight = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("      if (autoPlace) {\r\n");
      out.write("        var orgPlacement = placement\r\n");
      out.write("        var viewportDim = this.getPosition(this.$viewport)\r\n");
      out.write("\r\n");
      out.write("        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\r\n");
      out.write("                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\r\n");
      out.write("                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\r\n");
      out.write("                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\r\n");
      out.write("                    placement\r\n");
      out.write("\r\n");
      out.write("        $tip\r\n");
      out.write("          .removeClass(orgPlacement)\r\n");
      out.write("          .addClass(placement)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\r\n");
      out.write("\r\n");
      out.write("      this.applyPlacement(calculatedOffset, placement)\r\n");
      out.write("\r\n");
      out.write("      var complete = function () {\r\n");
      out.write("        var prevHoverState = that.hoverState\r\n");
      out.write("        that.$element.trigger('shown.bs.' + that.type)\r\n");
      out.write("        that.hoverState = null\r\n");
      out.write("\r\n");
      out.write("        if (prevHoverState == 'out') that.leave(that)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      $.support.transition && this.$tip.hasClass('fade') ?\r\n");
      out.write("        $tip\r\n");
      out.write("          .one('bsTransitionEnd', complete)\r\n");
      out.write("          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n");
      out.write("        complete()\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.applyPlacement = function (offset, placement) {\r\n");
      out.write("    var $tip   = this.tip()\r\n");
      out.write("    var width  = $tip[0].offsetWidth\r\n");
      out.write("    var height = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    // manually read margins because getBoundingClientRect includes difference\r\n");
      out.write("    var marginTop = parseInt($tip.css('margin-top'), 10)\r\n");
      out.write("    var marginLeft = parseInt($tip.css('margin-left'), 10)\r\n");
      out.write("\r\n");
      out.write("    // we must check for NaN for ie 8/9\r\n");
      out.write("    if (isNaN(marginTop))  marginTop  = 0\r\n");
      out.write("    if (isNaN(marginLeft)) marginLeft = 0\r\n");
      out.write("\r\n");
      out.write("    offset.top  += marginTop\r\n");
      out.write("    offset.left += marginLeft\r\n");
      out.write("\r\n");
      out.write("    // $.fn.offset doesn't round pixel values\r\n");
      out.write("    // so we use setOffset directly with our own function B-0\r\n");
      out.write("    $.offset.setOffset($tip[0], $.extend({\r\n");
      out.write("      using: function (props) {\r\n");
      out.write("        $tip.css({\r\n");
      out.write("          top: Math.round(props.top),\r\n");
      out.write("          left: Math.round(props.left)\r\n");
      out.write("        })\r\n");
      out.write("      }\r\n");
      out.write("    }, offset), 0)\r\n");
      out.write("\r\n");
      out.write("    $tip.addClass('in')\r\n");
      out.write("\r\n");
      out.write("    // check to see if placing tip in new offset caused the tip to resize itself\r\n");
      out.write("    var actualWidth  = $tip[0].offsetWidth\r\n");
      out.write("    var actualHeight = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    if (placement == 'top' && actualHeight != height) {\r\n");
      out.write("      offset.top = offset.top + height - actualHeight\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\r\n");
      out.write("\r\n");
      out.write("    if (delta.left) offset.left += delta.left\r\n");
      out.write("    else offset.top += delta.top\r\n");
      out.write("\r\n");
      out.write("    var isVertical          = /top|bottom/.test(placement)\r\n");
      out.write("    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\r\n");
      out.write("    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\r\n");
      out.write("\r\n");
      out.write("    $tip.offset(offset)\r\n");
      out.write("    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\r\n");
      out.write("    this.arrow()\r\n");
      out.write("      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n");
      out.write("      .css(isVertical ? 'top' : 'left', '')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.setContent = function () {\r\n");
      out.write("    var $tip  = this.tip()\r\n");
      out.write("    var title = this.getTitle()\r\n");
      out.write("\r\n");
      out.write("    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\r\n");
      out.write("    $tip.removeClass('fade in top bottom left right')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.hide = function (callback) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var $tip = $(this.$tip)\r\n");
      out.write("    var e    = $.Event('hide.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    function complete() {\r\n");
      out.write("      if (that.hoverState != 'in') $tip.detach()\r\n");
      out.write("      that.$element\r\n");
      out.write("        .removeAttr('aria-describedby')\r\n");
      out.write("        .trigger('hidden.bs.' + that.type)\r\n");
      out.write("      callback && callback()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    $tip.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && $tip.hasClass('fade') ?\r\n");
      out.write("      $tip\r\n");
      out.write("        .one('bsTransitionEnd', complete)\r\n");
      out.write("        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n");
      out.write("      complete()\r\n");
      out.write("\r\n");
      out.write("    this.hoverState = null\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.fixTitle = function () {\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\r\n");
      out.write("      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.hasContent = function () {\r\n");
      out.write("    return this.getTitle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getPosition = function ($element) {\r\n");
      out.write("    $element   = $element || this.$element\r\n");
      out.write("\r\n");
      out.write("    var el     = $element[0]\r\n");
      out.write("    var isBody = el.tagName == 'BODY'\r\n");
      out.write("\r\n");
      out.write("    var elRect    = el.getBoundingClientRect()\r\n");
      out.write("    if (elRect.width == null) {\r\n");
      out.write("      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n");
      out.write("      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\r\n");
      out.write("    }\r\n");
      out.write("    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()\r\n");
      out.write("    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\r\n");
      out.write("    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\r\n");
      out.write("\r\n");
      out.write("    return $.extend({}, elRect, scroll, outerDims, elOffset)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\r\n");
      out.write("    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\r\n");
      out.write("           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\r\n");
      out.write("           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\r\n");
      out.write("        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\r\n");
      out.write("    var delta = { top: 0, left: 0 }\r\n");
      out.write("    if (!this.$viewport) return delta\r\n");
      out.write("\r\n");
      out.write("    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\r\n");
      out.write("    var viewportDimensions = this.getPosition(this.$viewport)\r\n");
      out.write("\r\n");
      out.write("    if (/right|left/.test(placement)) {\r\n");
      out.write("      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\r\n");
      out.write("      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\r\n");
      out.write("      if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n");
      out.write("        delta.top = viewportDimensions.top - topEdgeOffset\r\n");
      out.write("      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n");
      out.write("        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\r\n");
      out.write("      }\r\n");
      out.write("    } else {\r\n");
      out.write("      var leftEdgeOffset  = pos.left - viewportPadding\r\n");
      out.write("      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\r\n");
      out.write("      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n");
      out.write("        delta.left = viewportDimensions.left - leftEdgeOffset\r\n");
      out.write("      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n");
      out.write("        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return delta\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getTitle = function () {\r\n");
      out.write("    var title\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    var o  = this.options\r\n");
      out.write("\r\n");
      out.write("    title = $e.attr('data-original-title')\r\n");
      out.write("      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\r\n");
      out.write("\r\n");
      out.write("    return title\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getUID = function (prefix) {\r\n");
      out.write("    do prefix += ~~(Math.random() * 1000000)\r\n");
      out.write("    while (document.getElementById(prefix))\r\n");
      out.write("    return prefix\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.tip = function () {\r\n");
      out.write("    if (!this.$tip) {\r\n");
      out.write("      this.$tip = $(this.options.template)\r\n");
      out.write("      if (this.$tip.length != 1) {\r\n");
      out.write("        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    return this.$tip\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.arrow = function () {\r\n");
      out.write("    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.enable = function () {\r\n");
      out.write("    this.enabled = true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.disable = function () {\r\n");
      out.write("    this.enabled = false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.toggleEnabled = function () {\r\n");
      out.write("    this.enabled = !this.enabled\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.toggle = function (e) {\r\n");
      out.write("    var self = this\r\n");
      out.write("    if (e) {\r\n");
      out.write("      self = $(e.currentTarget).data('bs.' + this.type)\r\n");
      out.write("      if (!self) {\r\n");
      out.write("        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\r\n");
      out.write("        $(e.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (e) {\r\n");
      out.write("      self.inState.click = !self.inState.click\r\n");
      out.write("      if (self.isInStateTrue()) self.enter(self)\r\n");
      out.write("      else self.leave(self)\r\n");
      out.write("    } else {\r\n");
      out.write("      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.destroy = function () {\r\n");
      out.write("    var that = this\r\n");
      out.write("    clearTimeout(this.timeout)\r\n");
      out.write("    this.hide(function () {\r\n");
      out.write("      that.$element.off('.' + that.type).removeData('bs.' + that.type)\r\n");
      out.write("      if (that.$tip) {\r\n");
      out.write("        that.$tip.detach()\r\n");
      out.write("      }\r\n");
      out.write("      that.$tip = null\r\n");
      out.write("      that.$arrow = null\r\n");
      out.write("      that.$viewport = null\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP PLUGIN DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.tooltip')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data && /destroy|hide/.test(option)) return\r\n");
      out.write("      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.tooltip\r\n");
      out.write("\r\n");
      out.write("  $.fn.tooltip             = Plugin\r\n");
      out.write("  $.fn.tooltip.Constructor = Tooltip\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP NO CONFLICT\r\n");
      out.write("  // ===================\r\n");
      out.write("\r\n");
      out.write("  $.fn.tooltip.noConflict = function () {\r\n");
      out.write("    $.fn.tooltip = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: popover.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#popovers\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // POPOVER PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ===============================\r\n");
      out.write("\r\n");
      out.write("  var Popover = function (element, options) {\r\n");
      out.write("    this.init('popover', element, options)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\r\n");
      out.write("\r\n");
      out.write("  Popover.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\r\n");
      out.write("    placement: 'right',\r\n");
      out.write("    trigger: 'click',\r\n");
      out.write("    content: '',\r\n");
      out.write("    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // NOTE: POPOVER EXTENDS tooltip.js\r\n");
      out.write("  // ================================\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.constructor = Popover\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.getDefaults = function () {\r\n");
      out.write("    return Popover.DEFAULTS\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.setContent = function () {\r\n");
      out.write("    var $tip    = this.tip()\r\n");
      out.write("    var title   = this.getTitle()\r\n");
      out.write("    var content = this.getContent()\r\n");
      out.write("\r\n");
      out.write("    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\r\n");
      out.write("    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\r\n");
      out.write("      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\r\n");
      out.write("    ](content)\r\n");
      out.write("\r\n");
      out.write("    $tip.removeClass('fade top bottom left right in')\r\n");
      out.write("\r\n");
      out.write("    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\r\n");
      out.write("    // this manually by checking the contents.\r\n");
      out.write("    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.hasContent = function () {\r\n");
      out.write("    return this.getTitle() || this.getContent()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.getContent = function () {\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    var o  = this.options\r\n");
      out.write("\r\n");
      out.write("    return $e.attr('data-content')\r\n");
      out.write("      || (typeof o.content == 'function' ?\r\n");
      out.write("            o.content.call($e[0]) :\r\n");
      out.write("            o.content)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.arrow = function () {\r\n");
      out.write("    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // POPOVER PLUGIN DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.popover')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data && /destroy|hide/.test(option)) return\r\n");
      out.write("      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.popover\r\n");
      out.write("\r\n");
      out.write("  $.fn.popover             = Plugin\r\n");
      out.write("  $.fn.popover.Constructor = Popover\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // POPOVER NO CONFLICT\r\n");
      out.write("  // ===================\r\n");
      out.write("\r\n");
      out.write("  $.fn.popover.noConflict = function () {\r\n");
      out.write("    $.fn.popover = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: scrollspy.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#scrollspy\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY CLASS DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function ScrollSpy(element, options) {\r\n");
      out.write("    this.$body          = $(document.body)\r\n");
      out.write("    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\r\n");
      out.write("    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\r\n");
      out.write("    this.selector       = (this.options.target || '') + ' .nav li > a'\r\n");
      out.write("    this.offsets        = []\r\n");
      out.write("    this.targets        = []\r\n");
      out.write("    this.activeTarget   = null\r\n");
      out.write("    this.scrollHeight   = 0\r\n");
      out.write("\r\n");
      out.write("    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\r\n");
      out.write("    this.refresh()\r\n");
      out.write("    this.process()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.DEFAULTS = {\r\n");
      out.write("    offset: 10\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.getScrollHeight = function () {\r\n");
      out.write("    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.refresh = function () {\r\n");
      out.write("    var that          = this\r\n");
      out.write("    var offsetMethod  = 'offset'\r\n");
      out.write("    var offsetBase    = 0\r\n");
      out.write("\r\n");
      out.write("    this.offsets      = []\r\n");
      out.write("    this.targets      = []\r\n");
      out.write("    this.scrollHeight = this.getScrollHeight()\r\n");
      out.write("\r\n");
      out.write("    if (!$.isWindow(this.$scrollElement[0])) {\r\n");
      out.write("      offsetMethod = 'position'\r\n");
      out.write("      offsetBase   = this.$scrollElement.scrollTop()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.$body\r\n");
      out.write("      .find(this.selector)\r\n");
      out.write("      .map(function () {\r\n");
      out.write("        var $el   = $(this)\r\n");
      out.write("        var href  = $el.data('target') || $el.attr('href')\r\n");
      out.write("        var $href = /^#./.test(href) && $(href)\r\n");
      out.write("\r\n");
      out.write("        return ($href\r\n");
      out.write("          && $href.length\r\n");
      out.write("          && $href.is(':visible')\r\n");
      out.write("          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\r\n");
      out.write("      })\r\n");
      out.write("      .sort(function (a, b) { return a[0] - b[0] })\r\n");
      out.write("      .each(function () {\r\n");
      out.write("        that.offsets.push(this[0])\r\n");
      out.write("        that.targets.push(this[1])\r\n");
      out.write("      })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.process = function () {\r\n");
      out.write("    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\r\n");
      out.write("    var scrollHeight = this.getScrollHeight()\r\n");
      out.write("    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\r\n");
      out.write("    var offsets      = this.offsets\r\n");
      out.write("    var targets      = this.targets\r\n");
      out.write("    var activeTarget = this.activeTarget\r\n");
      out.write("    var i\r\n");
      out.write("\r\n");
      out.write("    if (this.scrollHeight != scrollHeight) {\r\n");
      out.write("      this.refresh()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (scrollTop >= maxScroll) {\r\n");
      out.write("      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (activeTarget && scrollTop < offsets[0]) {\r\n");
      out.write("      this.activeTarget = null\r\n");
      out.write("      return this.clear()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (i = offsets.length; i--;) {\r\n");
      out.write("      activeTarget != targets[i]\r\n");
      out.write("        && scrollTop >= offsets[i]\r\n");
      out.write("        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\r\n");
      out.write("        && this.activate(targets[i])\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.activate = function (target) {\r\n");
      out.write("    this.activeTarget = target\r\n");
      out.write("\r\n");
      out.write("    this.clear()\r\n");
      out.write("\r\n");
      out.write("    var selector = this.selector +\r\n");
      out.write("      '[data-target=\"' + target + '\"],' +\r\n");
      out.write("      this.selector + '[href=\"' + target + '\"]'\r\n");
      out.write("\r\n");
      out.write("    var active = $(selector)\r\n");
      out.write("      .parents('li')\r\n");
      out.write("      .addClass('active')\r\n");
      out.write("\r\n");
      out.write("    if (active.parent('.dropdown-menu').length) {\r\n");
      out.write("      active = active\r\n");
      out.write("        .closest('li.dropdown')\r\n");
      out.write("        .addClass('active')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    active.trigger('activate.bs.scrollspy')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.clear = function () {\r\n");
      out.write("    $(this.selector)\r\n");
      out.write("      .parentsUntil(this.options.target, '.active')\r\n");
      out.write("      .removeClass('active')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY PLUGIN DEFINITION\r\n");
      out.write("  // ===========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.scrollspy')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.scrollspy\r\n");
      out.write("\r\n");
      out.write("  $.fn.scrollspy             = Plugin\r\n");
      out.write("  $.fn.scrollspy.Constructor = ScrollSpy\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY NO CONFLICT\r\n");
      out.write("  // =====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.scrollspy.noConflict = function () {\r\n");
      out.write("    $.fn.scrollspy = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY DATA-API\r\n");
      out.write("  // ==================\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load.bs.scrollspy.data-api', function () {\r\n");
      out.write("    $('[data-spy=\"scroll\"]').each(function () {\r\n");
      out.write("      var $spy = $(this)\r\n");
      out.write("      Plugin.call($spy, $spy.data())\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: tab.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#tabs\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // TAB CLASS DEFINITION\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  var Tab = function (element) {\r\n");
      out.write("    // jscs:disable requireDollarBeforejQueryAssignment\r\n");
      out.write("    this.element = $(element)\r\n");
      out.write("    // jscs:enable requireDollarBeforejQueryAssignment\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tab.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Tab.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Tab.prototype.show = function () {\r\n");
      out.write("    var $this    = this.element\r\n");
      out.write("    var $ul      = $this.closest('ul:not(.dropdown-menu)')\r\n");
      out.write("    var selector = $this.data('target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if ($this.parent('li').hasClass('active')) return\r\n");
      out.write("\r\n");
      out.write("    var $previous = $ul.find('.active:last a')\r\n");
      out.write("    var hideEvent = $.Event('hide.bs.tab', {\r\n");
      out.write("      relatedTarget: $this[0]\r\n");
      out.write("    })\r\n");
      out.write("    var showEvent = $.Event('show.bs.tab', {\r\n");
      out.write("      relatedTarget: $previous[0]\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    $previous.trigger(hideEvent)\r\n");
      out.write("    $this.trigger(showEvent)\r\n");
      out.write("\r\n");
      out.write("    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    var $target = $(selector)\r\n");
      out.write("\r\n");
      out.write("    this.activate($this.closest('li'), $ul)\r\n");
      out.write("    this.activate($target, $target.parent(), function () {\r\n");
      out.write("      $previous.trigger({\r\n");
      out.write("        type: 'hidden.bs.tab',\r\n");
      out.write("        relatedTarget: $this[0]\r\n");
      out.write("      })\r\n");
      out.write("      $this.trigger({\r\n");
      out.write("        type: 'shown.bs.tab',\r\n");
      out.write("        relatedTarget: $previous[0]\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tab.prototype.activate = function (element, container, callback) {\r\n");
      out.write("    var $active    = container.find('> .active')\r\n");
      out.write("    var transition = callback\r\n");
      out.write("      && $.support.transition\r\n");
      out.write("      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\r\n");
      out.write("\r\n");
      out.write("    function next() {\r\n");
      out.write("      $active\r\n");
      out.write("        .removeClass('active')\r\n");
      out.write("        .find('> .dropdown-menu > .active')\r\n");
      out.write("          .removeClass('active')\r\n");
      out.write("        .end()\r\n");
      out.write("        .find('[data-toggle=\"tab\"]')\r\n");
      out.write("          .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("      element\r\n");
      out.write("        .addClass('active')\r\n");
      out.write("        .find('[data-toggle=\"tab\"]')\r\n");
      out.write("          .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("      if (transition) {\r\n");
      out.write("        element[0].offsetWidth // reflow for transition\r\n");
      out.write("        element.addClass('in')\r\n");
      out.write("      } else {\r\n");
      out.write("        element.removeClass('fade')\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      if (element.parent('.dropdown-menu').length) {\r\n");
      out.write("        element\r\n");
      out.write("          .closest('li.dropdown')\r\n");
      out.write("            .addClass('active')\r\n");
      out.write("          .end()\r\n");
      out.write("          .find('[data-toggle=\"tab\"]')\r\n");
      out.write("            .attr('aria-expanded', true)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      callback && callback()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $active.length && transition ?\r\n");
      out.write("      $active\r\n");
      out.write("        .one('bsTransitionEnd', next)\r\n");
      out.write("        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\r\n");
      out.write("      next()\r\n");
      out.write("\r\n");
      out.write("    $active.removeClass('in')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB PLUGIN DEFINITION\r\n");
      out.write("  // =====================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.tab')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.tab', (data = new Tab(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.tab\r\n");
      out.write("\r\n");
      out.write("  $.fn.tab             = Plugin\r\n");
      out.write("  $.fn.tab.Constructor = Tab\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB NO CONFLICT\r\n");
      out.write("  // ===============\r\n");
      out.write("\r\n");
      out.write("  $.fn.tab.noConflict = function () {\r\n");
      out.write("    $.fn.tab = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB DATA-API\r\n");
      out.write("  // ============\r\n");
      out.write("\r\n");
      out.write("  var clickHandler = function (e) {\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("    Plugin.call($(this), 'show')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\r\n");
      out.write("    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: affix.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#affix\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // AFFIX CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var Affix = function (element, options) {\r\n");
      out.write("    this.options = $.extend({}, Affix.DEFAULTS, options)\r\n");
      out.write("\r\n");
      out.write("    this.$target = $(this.options.target)\r\n");
      out.write("      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\r\n");
      out.write("      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\r\n");
      out.write("\r\n");
      out.write("    this.$element     = $(element)\r\n");
      out.write("    this.affixed      = null\r\n");
      out.write("    this.unpin        = null\r\n");
      out.write("    this.pinnedOffset = null\r\n");
      out.write("\r\n");
      out.write("    this.checkPosition()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Affix.RESET    = 'affix affix-top affix-bottom'\r\n");
      out.write("\r\n");
      out.write("  Affix.DEFAULTS = {\r\n");
      out.write("    offset: 0,\r\n");
      out.write("    target: window\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\r\n");
      out.write("    var scrollTop    = this.$target.scrollTop()\r\n");
      out.write("    var position     = this.$element.offset()\r\n");
      out.write("    var targetHeight = this.$target.height()\r\n");
      out.write("\r\n");
      out.write("    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\r\n");
      out.write("\r\n");
      out.write("    if (this.affixed == 'bottom') {\r\n");
      out.write("      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\r\n");
      out.write("      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var initializing   = this.affixed == null\r\n");
      out.write("    var colliderTop    = initializing ? scrollTop : position.top\r\n");
      out.write("    var colliderHeight = initializing ? targetHeight : height\r\n");
      out.write("\r\n");
      out.write("    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\r\n");
      out.write("    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.getPinnedOffset = function () {\r\n");
      out.write("    if (this.pinnedOffset) return this.pinnedOffset\r\n");
      out.write("    this.$element.removeClass(Affix.RESET).addClass('affix')\r\n");
      out.write("    var scrollTop = this.$target.scrollTop()\r\n");
      out.write("    var position  = this.$element.offset()\r\n");
      out.write("    return (this.pinnedOffset = position.top - scrollTop)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.checkPositionWithEventLoop = function () {\r\n");
      out.write("    setTimeout($.proxy(this.checkPosition, this), 1)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.checkPosition = function () {\r\n");
      out.write("    if (!this.$element.is(':visible')) return\r\n");
      out.write("\r\n");
      out.write("    var height       = this.$element.height()\r\n");
      out.write("    var offset       = this.options.offset\r\n");
      out.write("    var offsetTop    = offset.top\r\n");
      out.write("    var offsetBottom = offset.bottom\r\n");
      out.write("    var scrollHeight = Math.max($(document).height(), $(document.body).height())\r\n");
      out.write("\r\n");
      out.write("    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\r\n");
      out.write("    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\r\n");
      out.write("    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\r\n");
      out.write("\r\n");
      out.write("    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\r\n");
      out.write("\r\n");
      out.write("    if (this.affixed != affix) {\r\n");
      out.write("      if (this.unpin != null) this.$element.css('top', '')\r\n");
      out.write("\r\n");
      out.write("      var affixType = 'affix' + (affix ? '-' + affix : '')\r\n");
      out.write("      var e         = $.Event(affixType + '.bs.affix')\r\n");
      out.write("\r\n");
      out.write("      this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      this.affixed = affix\r\n");
      out.write("      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\r\n");
      out.write("\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass(Affix.RESET)\r\n");
      out.write("        .addClass(affixType)\r\n");
      out.write("        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (affix == 'bottom') {\r\n");
      out.write("      this.$element.offset({\r\n");
      out.write("        top: scrollHeight - height - offsetBottom\r\n");
      out.write("      })\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.affix')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.affix\r\n");
      out.write("\r\n");
      out.write("  $.fn.affix             = Plugin\r\n");
      out.write("  $.fn.affix.Constructor = Affix\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.affix.noConflict = function () {\r\n");
      out.write("    $.fn.affix = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load', function () {\r\n");
      out.write("    $('[data-spy=\"affix\"]').each(function () {\r\n");
      out.write("      var $spy = $(this)\r\n");
      out.write("      var data = $spy.data()\r\n");
      out.write("\r\n");
      out.write("      data.offset = data.offset || {}\r\n");
      out.write("\r\n");
      out.write("      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\r\n");
      out.write("      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\r\n");
      out.write("\r\n");
      out.write("      Plugin.call($spy, data)\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write("        <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n");
      out.write("            </head>\n");
      out.write("    <body>\n");
      out.write("        \n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("        <link href=\"bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("        <script src=\"bootstrap/js/jquery.js\"></script>\n");
      out.write("\n");
      out.write("        <script >\n");
      out.write("            ");
      out.write("/*!\r\n");
      out.write(" * Bootstrap v3.3.6 (http://getbootstrap.com)\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under the MIT license\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("if (typeof jQuery === 'undefined') {\r\n");
      out.write("  throw new Error('Bootstrap\\'s JavaScript requires jQuery')\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("  var version = $.fn.jquery.split(' ')[0].split('.')\r\n");
      out.write("  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {\r\n");
      out.write("    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')\r\n");
      out.write("  }\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: transition.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#transitions\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\r\n");
      out.write("  // ============================================================\r\n");
      out.write("\r\n");
      out.write("  function transitionEnd() {\r\n");
      out.write("    var el = document.createElement('bootstrap')\r\n");
      out.write("\r\n");
      out.write("    var transEndEventNames = {\r\n");
      out.write("      WebkitTransition : 'webkitTransitionEnd',\r\n");
      out.write("      MozTransition    : 'transitionend',\r\n");
      out.write("      OTransition      : 'oTransitionEnd otransitionend',\r\n");
      out.write("      transition       : 'transitionend'\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (var name in transEndEventNames) {\r\n");
      out.write("      if (el.style[name] !== undefined) {\r\n");
      out.write("        return { end: transEndEventNames[name] }\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false // explicit for ie8 (  ._.)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // http://blog.alexmaccaw.com/css-transitions\r\n");
      out.write("  $.fn.emulateTransitionEnd = function (duration) {\r\n");
      out.write("    var called = false\r\n");
      out.write("    var $el = this\r\n");
      out.write("    $(this).one('bsTransitionEnd', function () { called = true })\r\n");
      out.write("    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\r\n");
      out.write("    setTimeout(callback, duration)\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(function () {\r\n");
      out.write("    $.support.transition = transitionEnd()\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return\r\n");
      out.write("\r\n");
      out.write("    $.event.special.bsTransitionEnd = {\r\n");
      out.write("      bindType: $.support.transition.end,\r\n");
      out.write("      delegateType: $.support.transition.end,\r\n");
      out.write("      handle: function (e) {\r\n");
      out.write("        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: alert.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#alerts\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // ALERT CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var dismiss = '[data-dismiss=\"alert\"]'\r\n");
      out.write("  var Alert   = function (el) {\r\n");
      out.write("    $(el).on('click', dismiss, this.close)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Alert.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Alert.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Alert.prototype.close = function (e) {\r\n");
      out.write("    var $this    = $(this)\r\n");
      out.write("    var selector = $this.attr('data-target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var $parent = $(selector)\r\n");
      out.write("\r\n");
      out.write("    if (e) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    if (!$parent.length) {\r\n");
      out.write("      $parent = $this.closest('.alert')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $parent.trigger(e = $.Event('close.bs.alert'))\r\n");
      out.write("\r\n");
      out.write("    if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    $parent.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("    function removeElement() {\r\n");
      out.write("      // detach from parent, fire event then clean up data\r\n");
      out.write("      $parent.detach().trigger('closed.bs.alert').remove()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && $parent.hasClass('fade') ?\r\n");
      out.write("      $parent\r\n");
      out.write("        .one('bsTransitionEnd', removeElement)\r\n");
      out.write("        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\r\n");
      out.write("      removeElement()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.alert')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.alert', (data = new Alert(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option].call($this)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.alert\r\n");
      out.write("\r\n");
      out.write("  $.fn.alert             = Plugin\r\n");
      out.write("  $.fn.alert.Constructor = Alert\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.alert.noConflict = function () {\r\n");
      out.write("    $.fn.alert = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: button.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#buttons\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // BUTTON PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ==============================\r\n");
      out.write("\r\n");
      out.write("  var Button = function (element, options) {\r\n");
      out.write("    this.$element  = $(element)\r\n");
      out.write("    this.options   = $.extend({}, Button.DEFAULTS, options)\r\n");
      out.write("    this.isLoading = false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Button.DEFAULTS = {\r\n");
      out.write("    loadingText: 'loading...'\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.prototype.setState = function (state) {\r\n");
      out.write("    var d    = 'disabled'\r\n");
      out.write("    var $el  = this.$element\r\n");
      out.write("    var val  = $el.is('input') ? 'val' : 'html'\r\n");
      out.write("    var data = $el.data()\r\n");
      out.write("\r\n");
      out.write("    state += 'Text'\r\n");
      out.write("\r\n");
      out.write("    if (data.resetText == null) $el.data('resetText', $el[val]())\r\n");
      out.write("\r\n");
      out.write("    // push to event loop to allow forms to submit\r\n");
      out.write("    setTimeout($.proxy(function () {\r\n");
      out.write("      $el[val](data[state] == null ? this.options[state] : data[state])\r\n");
      out.write("\r\n");
      out.write("      if (state == 'loadingText') {\r\n");
      out.write("        this.isLoading = true\r\n");
      out.write("        $el.addClass(d).attr(d, d)\r\n");
      out.write("      } else if (this.isLoading) {\r\n");
      out.write("        this.isLoading = false\r\n");
      out.write("        $el.removeClass(d).removeAttr(d)\r\n");
      out.write("      }\r\n");
      out.write("    }, this), 0)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.prototype.toggle = function () {\r\n");
      out.write("    var changed = true\r\n");
      out.write("    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\r\n");
      out.write("\r\n");
      out.write("    if ($parent.length) {\r\n");
      out.write("      var $input = this.$element.find('input')\r\n");
      out.write("      if ($input.prop('type') == 'radio') {\r\n");
      out.write("        if ($input.prop('checked')) changed = false\r\n");
      out.write("        $parent.find('.active').removeClass('active')\r\n");
      out.write("        this.$element.addClass('active')\r\n");
      out.write("      } else if ($input.prop('type') == 'checkbox') {\r\n");
      out.write("        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\r\n");
      out.write("        this.$element.toggleClass('active')\r\n");
      out.write("      }\r\n");
      out.write("      $input.prop('checked', this.$element.hasClass('active'))\r\n");
      out.write("      if (changed) $input.trigger('change')\r\n");
      out.write("    } else {\r\n");
      out.write("      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\r\n");
      out.write("      this.$element.toggleClass('active')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON PLUGIN DEFINITION\r\n");
      out.write("  // ========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.button')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.button', (data = new Button(this, options)))\r\n");
      out.write("\r\n");
      out.write("      if (option == 'toggle') data.toggle()\r\n");
      out.write("      else if (option) data.setState(option)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.button\r\n");
      out.write("\r\n");
      out.write("  $.fn.button             = Plugin\r\n");
      out.write("  $.fn.button.Constructor = Button\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON NO CONFLICT\r\n");
      out.write("  // ==================\r\n");
      out.write("\r\n");
      out.write("  $.fn.button.noConflict = function () {\r\n");
      out.write("    $.fn.button = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON DATA-API\r\n");
      out.write("  // ===============\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\r\n");
      out.write("      var $btn = $(e.target)\r\n");
      out.write("      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')\r\n");
      out.write("      Plugin.call($btn, 'toggle')\r\n");
      out.write("      if (!($(e.target).is('input[type=\"radio\"]') || $(e.target).is('input[type=\"checkbox\"]'))) e.preventDefault()\r\n");
      out.write("    })\r\n");
      out.write("    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\r\n");
      out.write("      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: carousel.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#carousel\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL CLASS DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  var Carousel = function (element, options) {\r\n");
      out.write("    this.$element    = $(element)\r\n");
      out.write("    this.$indicators = this.$element.find('.carousel-indicators')\r\n");
      out.write("    this.options     = options\r\n");
      out.write("    this.paused      = null\r\n");
      out.write("    this.sliding     = null\r\n");
      out.write("    this.interval    = null\r\n");
      out.write("    this.$active     = null\r\n");
      out.write("    this.$items      = null\r\n");
      out.write("\r\n");
      out.write("    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\r\n");
      out.write("\r\n");
      out.write("    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\r\n");
      out.write("      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\r\n");
      out.write("      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Carousel.TRANSITION_DURATION = 600\r\n");
      out.write("\r\n");
      out.write("  Carousel.DEFAULTS = {\r\n");
      out.write("    interval: 5000,\r\n");
      out.write("    pause: 'hover',\r\n");
      out.write("    wrap: true,\r\n");
      out.write("    keyboard: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.keydown = function (e) {\r\n");
      out.write("    if (/input|textarea/i.test(e.target.tagName)) return\r\n");
      out.write("    switch (e.which) {\r\n");
      out.write("      case 37: this.prev(); break\r\n");
      out.write("      case 39: this.next(); break\r\n");
      out.write("      default: return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.cycle = function (e) {\r\n");
      out.write("    e || (this.paused = false)\r\n");
      out.write("\r\n");
      out.write("    this.interval && clearInterval(this.interval)\r\n");
      out.write("\r\n");
      out.write("    this.options.interval\r\n");
      out.write("      && !this.paused\r\n");
      out.write("      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.getItemIndex = function (item) {\r\n");
      out.write("    this.$items = item.parent().children('.item')\r\n");
      out.write("    return this.$items.index(item || this.$active)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.getItemForDirection = function (direction, active) {\r\n");
      out.write("    var activeIndex = this.getItemIndex(active)\r\n");
      out.write("    var willWrap = (direction == 'prev' && activeIndex === 0)\r\n");
      out.write("                || (direction == 'next' && activeIndex == (this.$items.length - 1))\r\n");
      out.write("    if (willWrap && !this.options.wrap) return active\r\n");
      out.write("    var delta = direction == 'prev' ? -1 : 1\r\n");
      out.write("    var itemIndex = (activeIndex + delta) % this.$items.length\r\n");
      out.write("    return this.$items.eq(itemIndex)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.to = function (pos) {\r\n");
      out.write("    var that        = this\r\n");
      out.write("    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\r\n");
      out.write("\r\n");
      out.write("    if (pos > (this.$items.length - 1) || pos < 0) return\r\n");
      out.write("\r\n");
      out.write("    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\r\n");
      out.write("    if (activeIndex == pos) return this.pause().cycle()\r\n");
      out.write("\r\n");
      out.write("    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.pause = function (e) {\r\n");
      out.write("    e || (this.paused = true)\r\n");
      out.write("\r\n");
      out.write("    if (this.$element.find('.next, .prev').length && $.support.transition) {\r\n");
      out.write("      this.$element.trigger($.support.transition.end)\r\n");
      out.write("      this.cycle(true)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.interval = clearInterval(this.interval)\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.next = function () {\r\n");
      out.write("    if (this.sliding) return\r\n");
      out.write("    return this.slide('next')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.prev = function () {\r\n");
      out.write("    if (this.sliding) return\r\n");
      out.write("    return this.slide('prev')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.slide = function (type, next) {\r\n");
      out.write("    var $active   = this.$element.find('.item.active')\r\n");
      out.write("    var $next     = next || this.getItemForDirection(type, $active)\r\n");
      out.write("    var isCycling = this.interval\r\n");
      out.write("    var direction = type == 'next' ? 'left' : 'right'\r\n");
      out.write("    var that      = this\r\n");
      out.write("\r\n");
      out.write("    if ($next.hasClass('active')) return (this.sliding = false)\r\n");
      out.write("\r\n");
      out.write("    var relatedTarget = $next[0]\r\n");
      out.write("    var slideEvent = $.Event('slide.bs.carousel', {\r\n");
      out.write("      relatedTarget: relatedTarget,\r\n");
      out.write("      direction: direction\r\n");
      out.write("    })\r\n");
      out.write("    this.$element.trigger(slideEvent)\r\n");
      out.write("    if (slideEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.sliding = true\r\n");
      out.write("\r\n");
      out.write("    isCycling && this.pause()\r\n");
      out.write("\r\n");
      out.write("    if (this.$indicators.length) {\r\n");
      out.write("      this.$indicators.find('.active').removeClass('active')\r\n");
      out.write("      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\r\n");
      out.write("      $nextIndicator && $nextIndicator.addClass('active')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\r\n");
      out.write("    if ($.support.transition && this.$element.hasClass('slide')) {\r\n");
      out.write("      $next.addClass(type)\r\n");
      out.write("      $next[0].offsetWidth // force reflow\r\n");
      out.write("      $active.addClass(direction)\r\n");
      out.write("      $next.addClass(direction)\r\n");
      out.write("      $active\r\n");
      out.write("        .one('bsTransitionEnd', function () {\r\n");
      out.write("          $next.removeClass([type, direction].join(' ')).addClass('active')\r\n");
      out.write("          $active.removeClass(['active', direction].join(' '))\r\n");
      out.write("          that.sliding = false\r\n");
      out.write("          setTimeout(function () {\r\n");
      out.write("            that.$element.trigger(slidEvent)\r\n");
      out.write("          }, 0)\r\n");
      out.write("        })\r\n");
      out.write("        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\r\n");
      out.write("    } else {\r\n");
      out.write("      $active.removeClass('active')\r\n");
      out.write("      $next.addClass('active')\r\n");
      out.write("      this.sliding = false\r\n");
      out.write("      this.$element.trigger(slidEvent)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    isCycling && this.cycle()\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.carousel')\r\n");
      out.write("      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("      var action  = typeof option == 'string' ? option : options.slide\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\r\n");
      out.write("      if (typeof option == 'number') data.to(option)\r\n");
      out.write("      else if (action) data[action]()\r\n");
      out.write("      else if (options.interval) data.pause().cycle()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.carousel\r\n");
      out.write("\r\n");
      out.write("  $.fn.carousel             = Plugin\r\n");
      out.write("  $.fn.carousel.Constructor = Carousel\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.carousel.noConflict = function () {\r\n");
      out.write("    $.fn.carousel = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL DATA-API\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  var clickHandler = function (e) {\r\n");
      out.write("    var href\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\r\n");
      out.write("    if (!$target.hasClass('carousel')) return\r\n");
      out.write("    var options = $.extend({}, $target.data(), $this.data())\r\n");
      out.write("    var slideIndex = $this.attr('data-slide-to')\r\n");
      out.write("    if (slideIndex) options.interval = false\r\n");
      out.write("\r\n");
      out.write("    Plugin.call($target, options)\r\n");
      out.write("\r\n");
      out.write("    if (slideIndex) {\r\n");
      out.write("      $target.data('bs.carousel').to(slideIndex)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\r\n");
      out.write("    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load', function () {\r\n");
      out.write("    $('[data-ride=\"carousel\"]').each(function () {\r\n");
      out.write("      var $carousel = $(this)\r\n");
      out.write("      Plugin.call($carousel, $carousel.data())\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: collapse.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#collapse\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ================================\r\n");
      out.write("\r\n");
      out.write("  var Collapse = function (element, options) {\r\n");
      out.write("    this.$element      = $(element)\r\n");
      out.write("    this.options       = $.extend({}, Collapse.DEFAULTS, options)\r\n");
      out.write("    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\r\n");
      out.write("                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\r\n");
      out.write("    this.transitioning = null\r\n");
      out.write("\r\n");
      out.write("    if (this.options.parent) {\r\n");
      out.write("      this.$parent = this.getParent()\r\n");
      out.write("    } else {\r\n");
      out.write("      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (this.options.toggle) this.toggle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Collapse.TRANSITION_DURATION = 350\r\n");
      out.write("\r\n");
      out.write("  Collapse.DEFAULTS = {\r\n");
      out.write("    toggle: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.dimension = function () {\r\n");
      out.write("    var hasWidth = this.$element.hasClass('width')\r\n");
      out.write("    return hasWidth ? 'width' : 'height'\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.show = function () {\r\n");
      out.write("    if (this.transitioning || this.$element.hasClass('in')) return\r\n");
      out.write("\r\n");
      out.write("    var activesData\r\n");
      out.write("    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\r\n");
      out.write("\r\n");
      out.write("    if (actives && actives.length) {\r\n");
      out.write("      activesData = actives.data('bs.collapse')\r\n");
      out.write("      if (activesData && activesData.transitioning) return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var startEvent = $.Event('show.bs.collapse')\r\n");
      out.write("    this.$element.trigger(startEvent)\r\n");
      out.write("    if (startEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    if (actives && actives.length) {\r\n");
      out.write("      Plugin.call(actives, 'hide')\r\n");
      out.write("      activesData || actives.data('bs.collapse', null)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var dimension = this.dimension()\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .removeClass('collapse')\r\n");
      out.write("      .addClass('collapsing')[dimension](0)\r\n");
      out.write("      .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("    this.$trigger\r\n");
      out.write("      .removeClass('collapsed')\r\n");
      out.write("      .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("    this.transitioning = 1\r\n");
      out.write("\r\n");
      out.write("    var complete = function () {\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass('collapsing')\r\n");
      out.write("        .addClass('collapse in')[dimension]('')\r\n");
      out.write("      this.transitioning = 0\r\n");
      out.write("      this.$element\r\n");
      out.write("        .trigger('shown.bs.collapse')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return complete.call(this)\r\n");
      out.write("\r\n");
      out.write("    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .one('bsTransitionEnd', $.proxy(complete, this))\r\n");
      out.write("      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.hide = function () {\r\n");
      out.write("    if (this.transitioning || !this.$element.hasClass('in')) return\r\n");
      out.write("\r\n");
      out.write("    var startEvent = $.Event('hide.bs.collapse')\r\n");
      out.write("    this.$element.trigger(startEvent)\r\n");
      out.write("    if (startEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    var dimension = this.dimension()\r\n");
      out.write("\r\n");
      out.write("    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .addClass('collapsing')\r\n");
      out.write("      .removeClass('collapse in')\r\n");
      out.write("      .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("    this.$trigger\r\n");
      out.write("      .addClass('collapsed')\r\n");
      out.write("      .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("    this.transitioning = 1\r\n");
      out.write("\r\n");
      out.write("    var complete = function () {\r\n");
      out.write("      this.transitioning = 0\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass('collapsing')\r\n");
      out.write("        .addClass('collapse')\r\n");
      out.write("        .trigger('hidden.bs.collapse')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return complete.call(this)\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      [dimension](0)\r\n");
      out.write("      .one('bsTransitionEnd', $.proxy(complete, this))\r\n");
      out.write("      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.toggle = function () {\r\n");
      out.write("    this[this.$element.hasClass('in') ? 'hide' : 'show']()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.getParent = function () {\r\n");
      out.write("    return $(this.options.parent)\r\n");
      out.write("      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\r\n");
      out.write("      .each($.proxy(function (i, element) {\r\n");
      out.write("        var $element = $(element)\r\n");
      out.write("        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\r\n");
      out.write("      }, this))\r\n");
      out.write("      .end()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\r\n");
      out.write("    var isOpen = $element.hasClass('in')\r\n");
      out.write("\r\n");
      out.write("    $element.attr('aria-expanded', isOpen)\r\n");
      out.write("    $trigger\r\n");
      out.write("      .toggleClass('collapsed', !isOpen)\r\n");
      out.write("      .attr('aria-expanded', isOpen)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function getTargetFromTrigger($trigger) {\r\n");
      out.write("    var href\r\n");
      out.write("    var target = $trigger.attr('data-target')\r\n");
      out.write("      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\r\n");
      out.write("\r\n");
      out.write("    return $(target)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.collapse')\r\n");
      out.write("      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("\r\n");
      out.write("      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\r\n");
      out.write("      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.collapse\r\n");
      out.write("\r\n");
      out.write("  $.fn.collapse             = Plugin\r\n");
      out.write("  $.fn.collapse.Constructor = Collapse\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.collapse.noConflict = function () {\r\n");
      out.write("    $.fn.collapse = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE DATA-API\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("\r\n");
      out.write("    if (!$this.attr('data-target')) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    var $target = getTargetFromTrigger($this)\r\n");
      out.write("    var data    = $target.data('bs.collapse')\r\n");
      out.write("    var option  = data ? 'toggle' : $this.data()\r\n");
      out.write("\r\n");
      out.write("    Plugin.call($target, option)\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: dropdown.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#dropdowns\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN CLASS DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  var backdrop = '.dropdown-backdrop'\r\n");
      out.write("  var toggle   = '[data-toggle=\"dropdown\"]'\r\n");
      out.write("  var Dropdown = function (element) {\r\n");
      out.write("    $(element).on('click.bs.dropdown', this.toggle)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  function getParent($this) {\r\n");
      out.write("    var selector = $this.attr('data-target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var $parent = selector && $(selector)\r\n");
      out.write("\r\n");
      out.write("    return $parent && $parent.length ? $parent : $this.parent()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function clearMenus(e) {\r\n");
      out.write("    if (e && e.which === 3) return\r\n");
      out.write("    $(backdrop).remove()\r\n");
      out.write("    $(toggle).each(function () {\r\n");
      out.write("      var $this         = $(this)\r\n");
      out.write("      var $parent       = getParent($this)\r\n");
      out.write("      var relatedTarget = { relatedTarget: this }\r\n");
      out.write("\r\n");
      out.write("      if (!$parent.hasClass('open')) return\r\n");
      out.write("\r\n");
      out.write("      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\r\n");
      out.write("\r\n");
      out.write("      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      $this.attr('aria-expanded', 'false')\r\n");
      out.write("      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.prototype.toggle = function (e) {\r\n");
      out.write("    var $this = $(this)\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('.disabled, :disabled')) return\r\n");
      out.write("\r\n");
      out.write("    var $parent  = getParent($this)\r\n");
      out.write("    var isActive = $parent.hasClass('open')\r\n");
      out.write("\r\n");
      out.write("    clearMenus()\r\n");
      out.write("\r\n");
      out.write("    if (!isActive) {\r\n");
      out.write("      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\r\n");
      out.write("        // if mobile we use a backdrop because click events don't delegate\r\n");
      out.write("        $(document.createElement('div'))\r\n");
      out.write("          .addClass('dropdown-backdrop')\r\n");
      out.write("          .insertAfter($(this))\r\n");
      out.write("          .on('click', clearMenus)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      var relatedTarget = { relatedTarget: this }\r\n");
      out.write("      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      $this\r\n");
      out.write("        .trigger('focus')\r\n");
      out.write("        .attr('aria-expanded', 'true')\r\n");
      out.write("\r\n");
      out.write("      $parent\r\n");
      out.write("        .toggleClass('open')\r\n");
      out.write("        .trigger($.Event('shown.bs.dropdown', relatedTarget))\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.prototype.keydown = function (e) {\r\n");
      out.write("    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\r\n");
      out.write("\r\n");
      out.write("    var $this = $(this)\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("    e.stopPropagation()\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('.disabled, :disabled')) return\r\n");
      out.write("\r\n");
      out.write("    var $parent  = getParent($this)\r\n");
      out.write("    var isActive = $parent.hasClass('open')\r\n");
      out.write("\r\n");
      out.write("    if (!isActive && e.which != 27 || isActive && e.which == 27) {\r\n");
      out.write("      if (e.which == 27) $parent.find(toggle).trigger('focus')\r\n");
      out.write("      return $this.trigger('click')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var desc = ' li:not(.disabled):visible a'\r\n");
      out.write("    var $items = $parent.find('.dropdown-menu' + desc)\r\n");
      out.write("\r\n");
      out.write("    if (!$items.length) return\r\n");
      out.write("\r\n");
      out.write("    var index = $items.index(e.target)\r\n");
      out.write("\r\n");
      out.write("    if (e.which == 38 && index > 0)                 index--         // up\r\n");
      out.write("    if (e.which == 40 && index < $items.length - 1) index++         // down\r\n");
      out.write("    if (!~index)                                    index = 0\r\n");
      out.write("\r\n");
      out.write("    $items.eq(index).trigger('focus')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.dropdown')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option].call($this)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.dropdown\r\n");
      out.write("\r\n");
      out.write("  $.fn.dropdown             = Plugin\r\n");
      out.write("  $.fn.dropdown.Constructor = Dropdown\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.dropdown.noConflict = function () {\r\n");
      out.write("    $.fn.dropdown = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // APPLY TO STANDARD DROPDOWN ELEMENTS\r\n");
      out.write("  // ===================================\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.dropdown.data-api', clearMenus)\r\n");
      out.write("    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\r\n");
      out.write("    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\r\n");
      out.write("    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\r\n");
      out.write("    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: modal.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#modals\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // MODAL CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var Modal = function (element, options) {\r\n");
      out.write("    this.options             = options\r\n");
      out.write("    this.$body               = $(document.body)\r\n");
      out.write("    this.$element            = $(element)\r\n");
      out.write("    this.$dialog             = this.$element.find('.modal-dialog')\r\n");
      out.write("    this.$backdrop           = null\r\n");
      out.write("    this.isShown             = null\r\n");
      out.write("    this.originalBodyPad     = null\r\n");
      out.write("    this.scrollbarWidth      = 0\r\n");
      out.write("    this.ignoreBackdropClick = false\r\n");
      out.write("\r\n");
      out.write("    if (this.options.remote) {\r\n");
      out.write("      this.$element\r\n");
      out.write("        .find('.modal-content')\r\n");
      out.write("        .load(this.options.remote, $.proxy(function () {\r\n");
      out.write("          this.$element.trigger('loaded.bs.modal')\r\n");
      out.write("        }, this))\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Modal.TRANSITION_DURATION = 300\r\n");
      out.write("  Modal.BACKDROP_TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Modal.DEFAULTS = {\r\n");
      out.write("    backdrop: true,\r\n");
      out.write("    keyboard: true,\r\n");
      out.write("    show: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.toggle = function (_relatedTarget) {\r\n");
      out.write("    return this.isShown ? this.hide() : this.show(_relatedTarget)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.show = function (_relatedTarget) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (this.isShown || e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.isShown = true\r\n");
      out.write("\r\n");
      out.write("    this.checkScrollbar()\r\n");
      out.write("    this.setScrollbar()\r\n");
      out.write("    this.$body.addClass('modal-open')\r\n");
      out.write("\r\n");
      out.write("    this.escape()\r\n");
      out.write("    this.resize()\r\n");
      out.write("\r\n");
      out.write("    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\r\n");
      out.write("\r\n");
      out.write("    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\r\n");
      out.write("      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\r\n");
      out.write("        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    this.backdrop(function () {\r\n");
      out.write("      var transition = $.support.transition && that.$element.hasClass('fade')\r\n");
      out.write("\r\n");
      out.write("      if (!that.$element.parent().length) {\r\n");
      out.write("        that.$element.appendTo(that.$body) // don't move modals dom position\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      that.$element\r\n");
      out.write("        .show()\r\n");
      out.write("        .scrollTop(0)\r\n");
      out.write("\r\n");
      out.write("      that.adjustDialog()\r\n");
      out.write("\r\n");
      out.write("      if (transition) {\r\n");
      out.write("        that.$element[0].offsetWidth // force reflow\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      that.$element.addClass('in')\r\n");
      out.write("\r\n");
      out.write("      that.enforceFocus()\r\n");
      out.write("\r\n");
      out.write("      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\r\n");
      out.write("\r\n");
      out.write("      transition ?\r\n");
      out.write("        that.$dialog // wait for modal to slide in\r\n");
      out.write("          .one('bsTransitionEnd', function () {\r\n");
      out.write("            that.$element.trigger('focus').trigger(e)\r\n");
      out.write("          })\r\n");
      out.write("          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\r\n");
      out.write("        that.$element.trigger('focus').trigger(e)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.hide = function (e) {\r\n");
      out.write("    if (e) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    e = $.Event('hide.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (!this.isShown || e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.isShown = false\r\n");
      out.write("\r\n");
      out.write("    this.escape()\r\n");
      out.write("    this.resize()\r\n");
      out.write("\r\n");
      out.write("    $(document).off('focusin.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .removeClass('in')\r\n");
      out.write("      .off('click.dismiss.bs.modal')\r\n");
      out.write("      .off('mouseup.dismiss.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$dialog.off('mousedown.dismiss.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && this.$element.hasClass('fade') ?\r\n");
      out.write("      this.$element\r\n");
      out.write("        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\r\n");
      out.write("        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\r\n");
      out.write("      this.hideModal()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.enforceFocus = function () {\r\n");
      out.write("    $(document)\r\n");
      out.write("      .off('focusin.bs.modal') // guard against infinite focus loop\r\n");
      out.write("      .on('focusin.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\r\n");
      out.write("          this.$element.trigger('focus')\r\n");
      out.write("        }\r\n");
      out.write("      }, this))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.escape = function () {\r\n");
      out.write("    if (this.isShown && this.options.keyboard) {\r\n");
      out.write("      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        e.which == 27 && this.hide()\r\n");
      out.write("      }, this))\r\n");
      out.write("    } else if (!this.isShown) {\r\n");
      out.write("      this.$element.off('keydown.dismiss.bs.modal')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resize = function () {\r\n");
      out.write("    if (this.isShown) {\r\n");
      out.write("      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\r\n");
      out.write("    } else {\r\n");
      out.write("      $(window).off('resize.bs.modal')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.hideModal = function () {\r\n");
      out.write("    var that = this\r\n");
      out.write("    this.$element.hide()\r\n");
      out.write("    this.backdrop(function () {\r\n");
      out.write("      that.$body.removeClass('modal-open')\r\n");
      out.write("      that.resetAdjustments()\r\n");
      out.write("      that.resetScrollbar()\r\n");
      out.write("      that.$element.trigger('hidden.bs.modal')\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.removeBackdrop = function () {\r\n");
      out.write("    this.$backdrop && this.$backdrop.remove()\r\n");
      out.write("    this.$backdrop = null\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.backdrop = function (callback) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var animate = this.$element.hasClass('fade') ? 'fade' : ''\r\n");
      out.write("\r\n");
      out.write("    if (this.isShown && this.options.backdrop) {\r\n");
      out.write("      var doAnimate = $.support.transition && animate\r\n");
      out.write("\r\n");
      out.write("      this.$backdrop = $(document.createElement('div'))\r\n");
      out.write("        .addClass('modal-backdrop ' + animate)\r\n");
      out.write("        .appendTo(this.$body)\r\n");
      out.write("\r\n");
      out.write("      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        if (this.ignoreBackdropClick) {\r\n");
      out.write("          this.ignoreBackdropClick = false\r\n");
      out.write("          return\r\n");
      out.write("        }\r\n");
      out.write("        if (e.target !== e.currentTarget) return\r\n");
      out.write("        this.options.backdrop == 'static'\r\n");
      out.write("          ? this.$element[0].focus()\r\n");
      out.write("          : this.hide()\r\n");
      out.write("      }, this))\r\n");
      out.write("\r\n");
      out.write("      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\r\n");
      out.write("\r\n");
      out.write("      this.$backdrop.addClass('in')\r\n");
      out.write("\r\n");
      out.write("      if (!callback) return\r\n");
      out.write("\r\n");
      out.write("      doAnimate ?\r\n");
      out.write("        this.$backdrop\r\n");
      out.write("          .one('bsTransitionEnd', callback)\r\n");
      out.write("          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\r\n");
      out.write("        callback()\r\n");
      out.write("\r\n");
      out.write("    } else if (!this.isShown && this.$backdrop) {\r\n");
      out.write("      this.$backdrop.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("      var callbackRemove = function () {\r\n");
      out.write("        that.removeBackdrop()\r\n");
      out.write("        callback && callback()\r\n");
      out.write("      }\r\n");
      out.write("      $.support.transition && this.$element.hasClass('fade') ?\r\n");
      out.write("        this.$backdrop\r\n");
      out.write("          .one('bsTransitionEnd', callbackRemove)\r\n");
      out.write("          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\r\n");
      out.write("        callbackRemove()\r\n");
      out.write("\r\n");
      out.write("    } else if (callback) {\r\n");
      out.write("      callback()\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // these following methods are used to handle overflowing modals\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.handleUpdate = function () {\r\n");
      out.write("    this.adjustDialog()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.adjustDialog = function () {\r\n");
      out.write("    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\r\n");
      out.write("\r\n");
      out.write("    this.$element.css({\r\n");
      out.write("      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\r\n");
      out.write("      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resetAdjustments = function () {\r\n");
      out.write("    this.$element.css({\r\n");
      out.write("      paddingLeft: '',\r\n");
      out.write("      paddingRight: ''\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.checkScrollbar = function () {\r\n");
      out.write("    var fullWindowWidth = window.innerWidth\r\n");
      out.write("    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\r\n");
      out.write("      var documentElementRect = document.documentElement.getBoundingClientRect()\r\n");
      out.write("      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\r\n");
      out.write("    }\r\n");
      out.write("    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\r\n");
      out.write("    this.scrollbarWidth = this.measureScrollbar()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.setScrollbar = function () {\r\n");
      out.write("    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\r\n");
      out.write("    this.originalBodyPad = document.body.style.paddingRight || ''\r\n");
      out.write("    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resetScrollbar = function () {\r\n");
      out.write("    this.$body.css('padding-right', this.originalBodyPad)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.measureScrollbar = function () { // thx walsh\r\n");
      out.write("    var scrollDiv = document.createElement('div')\r\n");
      out.write("    scrollDiv.className = 'modal-scrollbar-measure'\r\n");
      out.write("    this.$body.append(scrollDiv)\r\n");
      out.write("    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\r\n");
      out.write("    this.$body[0].removeChild(scrollDiv)\r\n");
      out.write("    return scrollbarWidth\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option, _relatedTarget) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.modal')\r\n");
      out.write("      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option](_relatedTarget)\r\n");
      out.write("      else if (options.show) data.show(_relatedTarget)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.modal\r\n");
      out.write("\r\n");
      out.write("  $.fn.modal             = Plugin\r\n");
      out.write("  $.fn.modal.Constructor = Modal\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.modal.noConflict = function () {\r\n");
      out.write("    $.fn.modal = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("    var href    = $this.attr('href')\r\n");
      out.write("    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\r\n");
      out.write("    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('a')) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    $target.one('show.bs.modal', function (showEvent) {\r\n");
      out.write("      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\r\n");
      out.write("      $target.one('hidden.bs.modal', function () {\r\n");
      out.write("        $this.is(':visible') && $this.trigger('focus')\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("    Plugin.call($target, option, this)\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: tooltip.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#tooltip\r\n");
      out.write(" * Inspired by the original jQuery.tipsy by Jason Frame\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ===============================\r\n");
      out.write("\r\n");
      out.write("  var Tooltip = function (element, options) {\r\n");
      out.write("    this.type       = null\r\n");
      out.write("    this.options    = null\r\n");
      out.write("    this.enabled    = null\r\n");
      out.write("    this.timeout    = null\r\n");
      out.write("    this.hoverState = null\r\n");
      out.write("    this.$element   = null\r\n");
      out.write("    this.inState    = null\r\n");
      out.write("\r\n");
      out.write("    this.init('tooltip', element, options)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Tooltip.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Tooltip.DEFAULTS = {\r\n");
      out.write("    animation: true,\r\n");
      out.write("    placement: 'top',\r\n");
      out.write("    selector: false,\r\n");
      out.write("    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n");
      out.write("    trigger: 'hover focus',\r\n");
      out.write("    title: '',\r\n");
      out.write("    delay: 0,\r\n");
      out.write("    html: false,\r\n");
      out.write("    container: false,\r\n");
      out.write("    viewport: {\r\n");
      out.write("      selector: 'body',\r\n");
      out.write("      padding: 0\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.init = function (type, element, options) {\r\n");
      out.write("    this.enabled   = true\r\n");
      out.write("    this.type      = type\r\n");
      out.write("    this.$element  = $(element)\r\n");
      out.write("    this.options   = this.getOptions(options)\r\n");
      out.write("    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\r\n");
      out.write("    this.inState   = { click: false, hover: false, focus: false }\r\n");
      out.write("\r\n");
      out.write("    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\r\n");
      out.write("      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var triggers = this.options.trigger.split(' ')\r\n");
      out.write("\r\n");
      out.write("    for (var i = triggers.length; i--;) {\r\n");
      out.write("      var trigger = triggers[i]\r\n");
      out.write("\r\n");
      out.write("      if (trigger == 'click') {\r\n");
      out.write("        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\r\n");
      out.write("      } else if (trigger != 'manual') {\r\n");
      out.write("        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\r\n");
      out.write("        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\r\n");
      out.write("\r\n");
      out.write("        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\r\n");
      out.write("        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.options.selector ?\r\n");
      out.write("      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\r\n");
      out.write("      this.fixTitle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getDefaults = function () {\r\n");
      out.write("    return Tooltip.DEFAULTS\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getOptions = function (options) {\r\n");
      out.write("    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\r\n");
      out.write("\r\n");
      out.write("    if (options.delay && typeof options.delay == 'number') {\r\n");
      out.write("      options.delay = {\r\n");
      out.write("        show: options.delay,\r\n");
      out.write("        hide: options.delay\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return options\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getDelegateOptions = function () {\r\n");
      out.write("    var options  = {}\r\n");
      out.write("    var defaults = this.getDefaults()\r\n");
      out.write("\r\n");
      out.write("    this._options && $.each(this._options, function (key, value) {\r\n");
      out.write("      if (defaults[key] != value) options[key] = value\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    return options\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.enter = function (obj) {\r\n");
      out.write("    var self = obj instanceof this.constructor ?\r\n");
      out.write("      obj : $(obj.currentTarget).data('bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (!self) {\r\n");
      out.write("      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\r\n");
      out.write("      $(obj.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (obj instanceof $.Event) {\r\n");
      out.write("      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (self.tip().hasClass('in') || self.hoverState == 'in') {\r\n");
      out.write("      self.hoverState = 'in'\r\n");
      out.write("      return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    clearTimeout(self.timeout)\r\n");
      out.write("\r\n");
      out.write("    self.hoverState = 'in'\r\n");
      out.write("\r\n");
      out.write("    if (!self.options.delay || !self.options.delay.show) return self.show()\r\n");
      out.write("\r\n");
      out.write("    self.timeout = setTimeout(function () {\r\n");
      out.write("      if (self.hoverState == 'in') self.show()\r\n");
      out.write("    }, self.options.delay.show)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.isInStateTrue = function () {\r\n");
      out.write("    for (var key in this.inState) {\r\n");
      out.write("      if (this.inState[key]) return true\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.leave = function (obj) {\r\n");
      out.write("    var self = obj instanceof this.constructor ?\r\n");
      out.write("      obj : $(obj.currentTarget).data('bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (!self) {\r\n");
      out.write("      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\r\n");
      out.write("      $(obj.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (obj instanceof $.Event) {\r\n");
      out.write("      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (self.isInStateTrue()) return\r\n");
      out.write("\r\n");
      out.write("    clearTimeout(self.timeout)\r\n");
      out.write("\r\n");
      out.write("    self.hoverState = 'out'\r\n");
      out.write("\r\n");
      out.write("    if (!self.options.delay || !self.options.delay.hide) return self.hide()\r\n");
      out.write("\r\n");
      out.write("    self.timeout = setTimeout(function () {\r\n");
      out.write("      if (self.hoverState == 'out') self.hide()\r\n");
      out.write("    }, self.options.delay.hide)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.show = function () {\r\n");
      out.write("    var e = $.Event('show.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (this.hasContent() && this.enabled) {\r\n");
      out.write("      this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\r\n");
      out.write("      if (e.isDefaultPrevented() || !inDom) return\r\n");
      out.write("      var that = this\r\n");
      out.write("\r\n");
      out.write("      var $tip = this.tip()\r\n");
      out.write("\r\n");
      out.write("      var tipId = this.getUID(this.type)\r\n");
      out.write("\r\n");
      out.write("      this.setContent()\r\n");
      out.write("      $tip.attr('id', tipId)\r\n");
      out.write("      this.$element.attr('aria-describedby', tipId)\r\n");
      out.write("\r\n");
      out.write("      if (this.options.animation) $tip.addClass('fade')\r\n");
      out.write("\r\n");
      out.write("      var placement = typeof this.options.placement == 'function' ?\r\n");
      out.write("        this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n");
      out.write("        this.options.placement\r\n");
      out.write("\r\n");
      out.write("      var autoToken = /\\s?auto?\\s?/i\r\n");
      out.write("      var autoPlace = autoToken.test(placement)\r\n");
      out.write("      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\r\n");
      out.write("\r\n");
      out.write("      $tip\r\n");
      out.write("        .detach()\r\n");
      out.write("        .css({ top: 0, left: 0, display: 'block' })\r\n");
      out.write("        .addClass(placement)\r\n");
      out.write("        .data('bs.' + this.type, this)\r\n");
      out.write("\r\n");
      out.write("      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\r\n");
      out.write("      this.$element.trigger('inserted.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("      var pos          = this.getPosition()\r\n");
      out.write("      var actualWidth  = $tip[0].offsetWidth\r\n");
      out.write("      var actualHeight = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("      if (autoPlace) {\r\n");
      out.write("        var orgPlacement = placement\r\n");
      out.write("        var viewportDim = this.getPosition(this.$viewport)\r\n");
      out.write("\r\n");
      out.write("        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\r\n");
      out.write("                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\r\n");
      out.write("                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\r\n");
      out.write("                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\r\n");
      out.write("                    placement\r\n");
      out.write("\r\n");
      out.write("        $tip\r\n");
      out.write("          .removeClass(orgPlacement)\r\n");
      out.write("          .addClass(placement)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\r\n");
      out.write("\r\n");
      out.write("      this.applyPlacement(calculatedOffset, placement)\r\n");
      out.write("\r\n");
      out.write("      var complete = function () {\r\n");
      out.write("        var prevHoverState = that.hoverState\r\n");
      out.write("        that.$element.trigger('shown.bs.' + that.type)\r\n");
      out.write("        that.hoverState = null\r\n");
      out.write("\r\n");
      out.write("        if (prevHoverState == 'out') that.leave(that)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      $.support.transition && this.$tip.hasClass('fade') ?\r\n");
      out.write("        $tip\r\n");
      out.write("          .one('bsTransitionEnd', complete)\r\n");
      out.write("          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n");
      out.write("        complete()\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.applyPlacement = function (offset, placement) {\r\n");
      out.write("    var $tip   = this.tip()\r\n");
      out.write("    var width  = $tip[0].offsetWidth\r\n");
      out.write("    var height = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    // manually read margins because getBoundingClientRect includes difference\r\n");
      out.write("    var marginTop = parseInt($tip.css('margin-top'), 10)\r\n");
      out.write("    var marginLeft = parseInt($tip.css('margin-left'), 10)\r\n");
      out.write("\r\n");
      out.write("    // we must check for NaN for ie 8/9\r\n");
      out.write("    if (isNaN(marginTop))  marginTop  = 0\r\n");
      out.write("    if (isNaN(marginLeft)) marginLeft = 0\r\n");
      out.write("\r\n");
      out.write("    offset.top  += marginTop\r\n");
      out.write("    offset.left += marginLeft\r\n");
      out.write("\r\n");
      out.write("    // $.fn.offset doesn't round pixel values\r\n");
      out.write("    // so we use setOffset directly with our own function B-0\r\n");
      out.write("    $.offset.setOffset($tip[0], $.extend({\r\n");
      out.write("      using: function (props) {\r\n");
      out.write("        $tip.css({\r\n");
      out.write("          top: Math.round(props.top),\r\n");
      out.write("          left: Math.round(props.left)\r\n");
      out.write("        })\r\n");
      out.write("      }\r\n");
      out.write("    }, offset), 0)\r\n");
      out.write("\r\n");
      out.write("    $tip.addClass('in')\r\n");
      out.write("\r\n");
      out.write("    // check to see if placing tip in new offset caused the tip to resize itself\r\n");
      out.write("    var actualWidth  = $tip[0].offsetWidth\r\n");
      out.write("    var actualHeight = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    if (placement == 'top' && actualHeight != height) {\r\n");
      out.write("      offset.top = offset.top + height - actualHeight\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\r\n");
      out.write("\r\n");
      out.write("    if (delta.left) offset.left += delta.left\r\n");
      out.write("    else offset.top += delta.top\r\n");
      out.write("\r\n");
      out.write("    var isVertical          = /top|bottom/.test(placement)\r\n");
      out.write("    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\r\n");
      out.write("    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\r\n");
      out.write("\r\n");
      out.write("    $tip.offset(offset)\r\n");
      out.write("    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\r\n");
      out.write("    this.arrow()\r\n");
      out.write("      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n");
      out.write("      .css(isVertical ? 'top' : 'left', '')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.setContent = function () {\r\n");
      out.write("    var $tip  = this.tip()\r\n");
      out.write("    var title = this.getTitle()\r\n");
      out.write("\r\n");
      out.write("    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\r\n");
      out.write("    $tip.removeClass('fade in top bottom left right')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.hide = function (callback) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var $tip = $(this.$tip)\r\n");
      out.write("    var e    = $.Event('hide.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    function complete() {\r\n");
      out.write("      if (that.hoverState != 'in') $tip.detach()\r\n");
      out.write("      that.$element\r\n");
      out.write("        .removeAttr('aria-describedby')\r\n");
      out.write("        .trigger('hidden.bs.' + that.type)\r\n");
      out.write("      callback && callback()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    $tip.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && $tip.hasClass('fade') ?\r\n");
      out.write("      $tip\r\n");
      out.write("        .one('bsTransitionEnd', complete)\r\n");
      out.write("        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n");
      out.write("      complete()\r\n");
      out.write("\r\n");
      out.write("    this.hoverState = null\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.fixTitle = function () {\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\r\n");
      out.write("      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.hasContent = function () {\r\n");
      out.write("    return this.getTitle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getPosition = function ($element) {\r\n");
      out.write("    $element   = $element || this.$element\r\n");
      out.write("\r\n");
      out.write("    var el     = $element[0]\r\n");
      out.write("    var isBody = el.tagName == 'BODY'\r\n");
      out.write("\r\n");
      out.write("    var elRect    = el.getBoundingClientRect()\r\n");
      out.write("    if (elRect.width == null) {\r\n");
      out.write("      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n");
      out.write("      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\r\n");
      out.write("    }\r\n");
      out.write("    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()\r\n");
      out.write("    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\r\n");
      out.write("    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\r\n");
      out.write("\r\n");
      out.write("    return $.extend({}, elRect, scroll, outerDims, elOffset)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\r\n");
      out.write("    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\r\n");
      out.write("           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\r\n");
      out.write("           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\r\n");
      out.write("        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\r\n");
      out.write("    var delta = { top: 0, left: 0 }\r\n");
      out.write("    if (!this.$viewport) return delta\r\n");
      out.write("\r\n");
      out.write("    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\r\n");
      out.write("    var viewportDimensions = this.getPosition(this.$viewport)\r\n");
      out.write("\r\n");
      out.write("    if (/right|left/.test(placement)) {\r\n");
      out.write("      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\r\n");
      out.write("      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\r\n");
      out.write("      if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n");
      out.write("        delta.top = viewportDimensions.top - topEdgeOffset\r\n");
      out.write("      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n");
      out.write("        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\r\n");
      out.write("      }\r\n");
      out.write("    } else {\r\n");
      out.write("      var leftEdgeOffset  = pos.left - viewportPadding\r\n");
      out.write("      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\r\n");
      out.write("      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n");
      out.write("        delta.left = viewportDimensions.left - leftEdgeOffset\r\n");
      out.write("      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n");
      out.write("        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return delta\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getTitle = function () {\r\n");
      out.write("    var title\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    var o  = this.options\r\n");
      out.write("\r\n");
      out.write("    title = $e.attr('data-original-title')\r\n");
      out.write("      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\r\n");
      out.write("\r\n");
      out.write("    return title\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getUID = function (prefix) {\r\n");
      out.write("    do prefix += ~~(Math.random() * 1000000)\r\n");
      out.write("    while (document.getElementById(prefix))\r\n");
      out.write("    return prefix\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.tip = function () {\r\n");
      out.write("    if (!this.$tip) {\r\n");
      out.write("      this.$tip = $(this.options.template)\r\n");
      out.write("      if (this.$tip.length != 1) {\r\n");
      out.write("        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    return this.$tip\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.arrow = function () {\r\n");
      out.write("    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.enable = function () {\r\n");
      out.write("    this.enabled = true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.disable = function () {\r\n");
      out.write("    this.enabled = false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.toggleEnabled = function () {\r\n");
      out.write("    this.enabled = !this.enabled\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.toggle = function (e) {\r\n");
      out.write("    var self = this\r\n");
      out.write("    if (e) {\r\n");
      out.write("      self = $(e.currentTarget).data('bs.' + this.type)\r\n");
      out.write("      if (!self) {\r\n");
      out.write("        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\r\n");
      out.write("        $(e.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (e) {\r\n");
      out.write("      self.inState.click = !self.inState.click\r\n");
      out.write("      if (self.isInStateTrue()) self.enter(self)\r\n");
      out.write("      else self.leave(self)\r\n");
      out.write("    } else {\r\n");
      out.write("      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.destroy = function () {\r\n");
      out.write("    var that = this\r\n");
      out.write("    clearTimeout(this.timeout)\r\n");
      out.write("    this.hide(function () {\r\n");
      out.write("      that.$element.off('.' + that.type).removeData('bs.' + that.type)\r\n");
      out.write("      if (that.$tip) {\r\n");
      out.write("        that.$tip.detach()\r\n");
      out.write("      }\r\n");
      out.write("      that.$tip = null\r\n");
      out.write("      that.$arrow = null\r\n");
      out.write("      that.$viewport = null\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP PLUGIN DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.tooltip')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data && /destroy|hide/.test(option)) return\r\n");
      out.write("      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.tooltip\r\n");
      out.write("\r\n");
      out.write("  $.fn.tooltip             = Plugin\r\n");
      out.write("  $.fn.tooltip.Constructor = Tooltip\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP NO CONFLICT\r\n");
      out.write("  // ===================\r\n");
      out.write("\r\n");
      out.write("  $.fn.tooltip.noConflict = function () {\r\n");
      out.write("    $.fn.tooltip = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: popover.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#popovers\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // POPOVER PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ===============================\r\n");
      out.write("\r\n");
      out.write("  var Popover = function (element, options) {\r\n");
      out.write("    this.init('popover', element, options)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\r\n");
      out.write("\r\n");
      out.write("  Popover.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\r\n");
      out.write("    placement: 'right',\r\n");
      out.write("    trigger: 'click',\r\n");
      out.write("    content: '',\r\n");
      out.write("    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // NOTE: POPOVER EXTENDS tooltip.js\r\n");
      out.write("  // ================================\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.constructor = Popover\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.getDefaults = function () {\r\n");
      out.write("    return Popover.DEFAULTS\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.setContent = function () {\r\n");
      out.write("    var $tip    = this.tip()\r\n");
      out.write("    var title   = this.getTitle()\r\n");
      out.write("    var content = this.getContent()\r\n");
      out.write("\r\n");
      out.write("    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\r\n");
      out.write("    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\r\n");
      out.write("      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\r\n");
      out.write("    ](content)\r\n");
      out.write("\r\n");
      out.write("    $tip.removeClass('fade top bottom left right in')\r\n");
      out.write("\r\n");
      out.write("    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\r\n");
      out.write("    // this manually by checking the contents.\r\n");
      out.write("    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.hasContent = function () {\r\n");
      out.write("    return this.getTitle() || this.getContent()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.getContent = function () {\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    var o  = this.options\r\n");
      out.write("\r\n");
      out.write("    return $e.attr('data-content')\r\n");
      out.write("      || (typeof o.content == 'function' ?\r\n");
      out.write("            o.content.call($e[0]) :\r\n");
      out.write("            o.content)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.arrow = function () {\r\n");
      out.write("    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // POPOVER PLUGIN DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.popover')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data && /destroy|hide/.test(option)) return\r\n");
      out.write("      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.popover\r\n");
      out.write("\r\n");
      out.write("  $.fn.popover             = Plugin\r\n");
      out.write("  $.fn.popover.Constructor = Popover\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // POPOVER NO CONFLICT\r\n");
      out.write("  // ===================\r\n");
      out.write("\r\n");
      out.write("  $.fn.popover.noConflict = function () {\r\n");
      out.write("    $.fn.popover = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: scrollspy.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#scrollspy\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY CLASS DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function ScrollSpy(element, options) {\r\n");
      out.write("    this.$body          = $(document.body)\r\n");
      out.write("    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\r\n");
      out.write("    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\r\n");
      out.write("    this.selector       = (this.options.target || '') + ' .nav li > a'\r\n");
      out.write("    this.offsets        = []\r\n");
      out.write("    this.targets        = []\r\n");
      out.write("    this.activeTarget   = null\r\n");
      out.write("    this.scrollHeight   = 0\r\n");
      out.write("\r\n");
      out.write("    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\r\n");
      out.write("    this.refresh()\r\n");
      out.write("    this.process()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.DEFAULTS = {\r\n");
      out.write("    offset: 10\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.getScrollHeight = function () {\r\n");
      out.write("    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.refresh = function () {\r\n");
      out.write("    var that          = this\r\n");
      out.write("    var offsetMethod  = 'offset'\r\n");
      out.write("    var offsetBase    = 0\r\n");
      out.write("\r\n");
      out.write("    this.offsets      = []\r\n");
      out.write("    this.targets      = []\r\n");
      out.write("    this.scrollHeight = this.getScrollHeight()\r\n");
      out.write("\r\n");
      out.write("    if (!$.isWindow(this.$scrollElement[0])) {\r\n");
      out.write("      offsetMethod = 'position'\r\n");
      out.write("      offsetBase   = this.$scrollElement.scrollTop()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.$body\r\n");
      out.write("      .find(this.selector)\r\n");
      out.write("      .map(function () {\r\n");
      out.write("        var $el   = $(this)\r\n");
      out.write("        var href  = $el.data('target') || $el.attr('href')\r\n");
      out.write("        var $href = /^#./.test(href) && $(href)\r\n");
      out.write("\r\n");
      out.write("        return ($href\r\n");
      out.write("          && $href.length\r\n");
      out.write("          && $href.is(':visible')\r\n");
      out.write("          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\r\n");
      out.write("      })\r\n");
      out.write("      .sort(function (a, b) { return a[0] - b[0] })\r\n");
      out.write("      .each(function () {\r\n");
      out.write("        that.offsets.push(this[0])\r\n");
      out.write("        that.targets.push(this[1])\r\n");
      out.write("      })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.process = function () {\r\n");
      out.write("    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\r\n");
      out.write("    var scrollHeight = this.getScrollHeight()\r\n");
      out.write("    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\r\n");
      out.write("    var offsets      = this.offsets\r\n");
      out.write("    var targets      = this.targets\r\n");
      out.write("    var activeTarget = this.activeTarget\r\n");
      out.write("    var i\r\n");
      out.write("\r\n");
      out.write("    if (this.scrollHeight != scrollHeight) {\r\n");
      out.write("      this.refresh()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (scrollTop >= maxScroll) {\r\n");
      out.write("      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (activeTarget && scrollTop < offsets[0]) {\r\n");
      out.write("      this.activeTarget = null\r\n");
      out.write("      return this.clear()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (i = offsets.length; i--;) {\r\n");
      out.write("      activeTarget != targets[i]\r\n");
      out.write("        && scrollTop >= offsets[i]\r\n");
      out.write("        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\r\n");
      out.write("        && this.activate(targets[i])\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.activate = function (target) {\r\n");
      out.write("    this.activeTarget = target\r\n");
      out.write("\r\n");
      out.write("    this.clear()\r\n");
      out.write("\r\n");
      out.write("    var selector = this.selector +\r\n");
      out.write("      '[data-target=\"' + target + '\"],' +\r\n");
      out.write("      this.selector + '[href=\"' + target + '\"]'\r\n");
      out.write("\r\n");
      out.write("    var active = $(selector)\r\n");
      out.write("      .parents('li')\r\n");
      out.write("      .addClass('active')\r\n");
      out.write("\r\n");
      out.write("    if (active.parent('.dropdown-menu').length) {\r\n");
      out.write("      active = active\r\n");
      out.write("        .closest('li.dropdown')\r\n");
      out.write("        .addClass('active')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    active.trigger('activate.bs.scrollspy')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.clear = function () {\r\n");
      out.write("    $(this.selector)\r\n");
      out.write("      .parentsUntil(this.options.target, '.active')\r\n");
      out.write("      .removeClass('active')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY PLUGIN DEFINITION\r\n");
      out.write("  // ===========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.scrollspy')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.scrollspy\r\n");
      out.write("\r\n");
      out.write("  $.fn.scrollspy             = Plugin\r\n");
      out.write("  $.fn.scrollspy.Constructor = ScrollSpy\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY NO CONFLICT\r\n");
      out.write("  // =====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.scrollspy.noConflict = function () {\r\n");
      out.write("    $.fn.scrollspy = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY DATA-API\r\n");
      out.write("  // ==================\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load.bs.scrollspy.data-api', function () {\r\n");
      out.write("    $('[data-spy=\"scroll\"]').each(function () {\r\n");
      out.write("      var $spy = $(this)\r\n");
      out.write("      Plugin.call($spy, $spy.data())\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: tab.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#tabs\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // TAB CLASS DEFINITION\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  var Tab = function (element) {\r\n");
      out.write("    // jscs:disable requireDollarBeforejQueryAssignment\r\n");
      out.write("    this.element = $(element)\r\n");
      out.write("    // jscs:enable requireDollarBeforejQueryAssignment\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tab.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Tab.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Tab.prototype.show = function () {\r\n");
      out.write("    var $this    = this.element\r\n");
      out.write("    var $ul      = $this.closest('ul:not(.dropdown-menu)')\r\n");
      out.write("    var selector = $this.data('target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if ($this.parent('li').hasClass('active')) return\r\n");
      out.write("\r\n");
      out.write("    var $previous = $ul.find('.active:last a')\r\n");
      out.write("    var hideEvent = $.Event('hide.bs.tab', {\r\n");
      out.write("      relatedTarget: $this[0]\r\n");
      out.write("    })\r\n");
      out.write("    var showEvent = $.Event('show.bs.tab', {\r\n");
      out.write("      relatedTarget: $previous[0]\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    $previous.trigger(hideEvent)\r\n");
      out.write("    $this.trigger(showEvent)\r\n");
      out.write("\r\n");
      out.write("    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    var $target = $(selector)\r\n");
      out.write("\r\n");
      out.write("    this.activate($this.closest('li'), $ul)\r\n");
      out.write("    this.activate($target, $target.parent(), function () {\r\n");
      out.write("      $previous.trigger({\r\n");
      out.write("        type: 'hidden.bs.tab',\r\n");
      out.write("        relatedTarget: $this[0]\r\n");
      out.write("      })\r\n");
      out.write("      $this.trigger({\r\n");
      out.write("        type: 'shown.bs.tab',\r\n");
      out.write("        relatedTarget: $previous[0]\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tab.prototype.activate = function (element, container, callback) {\r\n");
      out.write("    var $active    = container.find('> .active')\r\n");
      out.write("    var transition = callback\r\n");
      out.write("      && $.support.transition\r\n");
      out.write("      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\r\n");
      out.write("\r\n");
      out.write("    function next() {\r\n");
      out.write("      $active\r\n");
      out.write("        .removeClass('active')\r\n");
      out.write("        .find('> .dropdown-menu > .active')\r\n");
      out.write("          .removeClass('active')\r\n");
      out.write("        .end()\r\n");
      out.write("        .find('[data-toggle=\"tab\"]')\r\n");
      out.write("          .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("      element\r\n");
      out.write("        .addClass('active')\r\n");
      out.write("        .find('[data-toggle=\"tab\"]')\r\n");
      out.write("          .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("      if (transition) {\r\n");
      out.write("        element[0].offsetWidth // reflow for transition\r\n");
      out.write("        element.addClass('in')\r\n");
      out.write("      } else {\r\n");
      out.write("        element.removeClass('fade')\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      if (element.parent('.dropdown-menu').length) {\r\n");
      out.write("        element\r\n");
      out.write("          .closest('li.dropdown')\r\n");
      out.write("            .addClass('active')\r\n");
      out.write("          .end()\r\n");
      out.write("          .find('[data-toggle=\"tab\"]')\r\n");
      out.write("            .attr('aria-expanded', true)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      callback && callback()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $active.length && transition ?\r\n");
      out.write("      $active\r\n");
      out.write("        .one('bsTransitionEnd', next)\r\n");
      out.write("        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\r\n");
      out.write("      next()\r\n");
      out.write("\r\n");
      out.write("    $active.removeClass('in')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB PLUGIN DEFINITION\r\n");
      out.write("  // =====================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.tab')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.tab', (data = new Tab(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.tab\r\n");
      out.write("\r\n");
      out.write("  $.fn.tab             = Plugin\r\n");
      out.write("  $.fn.tab.Constructor = Tab\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB NO CONFLICT\r\n");
      out.write("  // ===============\r\n");
      out.write("\r\n");
      out.write("  $.fn.tab.noConflict = function () {\r\n");
      out.write("    $.fn.tab = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB DATA-API\r\n");
      out.write("  // ============\r\n");
      out.write("\r\n");
      out.write("  var clickHandler = function (e) {\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("    Plugin.call($(this), 'show')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\r\n");
      out.write("    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: affix.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#affix\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // AFFIX CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var Affix = function (element, options) {\r\n");
      out.write("    this.options = $.extend({}, Affix.DEFAULTS, options)\r\n");
      out.write("\r\n");
      out.write("    this.$target = $(this.options.target)\r\n");
      out.write("      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\r\n");
      out.write("      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\r\n");
      out.write("\r\n");
      out.write("    this.$element     = $(element)\r\n");
      out.write("    this.affixed      = null\r\n");
      out.write("    this.unpin        = null\r\n");
      out.write("    this.pinnedOffset = null\r\n");
      out.write("\r\n");
      out.write("    this.checkPosition()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Affix.RESET    = 'affix affix-top affix-bottom'\r\n");
      out.write("\r\n");
      out.write("  Affix.DEFAULTS = {\r\n");
      out.write("    offset: 0,\r\n");
      out.write("    target: window\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\r\n");
      out.write("    var scrollTop    = this.$target.scrollTop()\r\n");
      out.write("    var position     = this.$element.offset()\r\n");
      out.write("    var targetHeight = this.$target.height()\r\n");
      out.write("\r\n");
      out.write("    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\r\n");
      out.write("\r\n");
      out.write("    if (this.affixed == 'bottom') {\r\n");
      out.write("      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\r\n");
      out.write("      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var initializing   = this.affixed == null\r\n");
      out.write("    var colliderTop    = initializing ? scrollTop : position.top\r\n");
      out.write("    var colliderHeight = initializing ? targetHeight : height\r\n");
      out.write("\r\n");
      out.write("    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\r\n");
      out.write("    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.getPinnedOffset = function () {\r\n");
      out.write("    if (this.pinnedOffset) return this.pinnedOffset\r\n");
      out.write("    this.$element.removeClass(Affix.RESET).addClass('affix')\r\n");
      out.write("    var scrollTop = this.$target.scrollTop()\r\n");
      out.write("    var position  = this.$element.offset()\r\n");
      out.write("    return (this.pinnedOffset = position.top - scrollTop)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.checkPositionWithEventLoop = function () {\r\n");
      out.write("    setTimeout($.proxy(this.checkPosition, this), 1)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.checkPosition = function () {\r\n");
      out.write("    if (!this.$element.is(':visible')) return\r\n");
      out.write("\r\n");
      out.write("    var height       = this.$element.height()\r\n");
      out.write("    var offset       = this.options.offset\r\n");
      out.write("    var offsetTop    = offset.top\r\n");
      out.write("    var offsetBottom = offset.bottom\r\n");
      out.write("    var scrollHeight = Math.max($(document).height(), $(document.body).height())\r\n");
      out.write("\r\n");
      out.write("    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\r\n");
      out.write("    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\r\n");
      out.write("    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\r\n");
      out.write("\r\n");
      out.write("    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\r\n");
      out.write("\r\n");
      out.write("    if (this.affixed != affix) {\r\n");
      out.write("      if (this.unpin != null) this.$element.css('top', '')\r\n");
      out.write("\r\n");
      out.write("      var affixType = 'affix' + (affix ? '-' + affix : '')\r\n");
      out.write("      var e         = $.Event(affixType + '.bs.affix')\r\n");
      out.write("\r\n");
      out.write("      this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      this.affixed = affix\r\n");
      out.write("      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\r\n");
      out.write("\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass(Affix.RESET)\r\n");
      out.write("        .addClass(affixType)\r\n");
      out.write("        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (affix == 'bottom') {\r\n");
      out.write("      this.$element.offset({\r\n");
      out.write("        top: scrollHeight - height - offsetBottom\r\n");
      out.write("      })\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.affix')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.affix\r\n");
      out.write("\r\n");
      out.write("  $.fn.affix             = Plugin\r\n");
      out.write("  $.fn.affix.Constructor = Affix\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.affix.noConflict = function () {\r\n");
      out.write("    $.fn.affix = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load', function () {\r\n");
      out.write("    $('[data-spy=\"affix\"]').each(function () {\r\n");
      out.write("      var $spy = $(this)\r\n");
      out.write("      var data = $spy.data()\r\n");
      out.write("\r\n");
      out.write("      data.offset = data.offset || {}\r\n");
      out.write("\r\n");
      out.write("      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\r\n");
      out.write("      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\r\n");
      out.write("\r\n");
      out.write("      Plugin.call($spy, data)\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("        <link href=\"bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write(" \n");
      out.write("\n");
      out.write("    \n");
      out.write("        \n");
      out.write("\n");
      out.write("        <script src=\"bootstrap/js/jquery.js\"></script>\n");
      out.write("        \n");
      out.write("        <script >\n");
      out.write("            ");
      out.write("/*!\r\n");
      out.write(" * Bootstrap v3.3.6 (http://getbootstrap.com)\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under the MIT license\r\n");
      out.write(" */\r\n");
      out.write("\r\n");
      out.write("if (typeof jQuery === 'undefined') {\r\n");
      out.write("  throw new Error('Bootstrap\\'s JavaScript requires jQuery')\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("  var version = $.fn.jquery.split(' ')[0].split('.')\r\n");
      out.write("  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {\r\n");
      out.write("    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')\r\n");
      out.write("  }\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: transition.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#transitions\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\r\n");
      out.write("  // ============================================================\r\n");
      out.write("\r\n");
      out.write("  function transitionEnd() {\r\n");
      out.write("    var el = document.createElement('bootstrap')\r\n");
      out.write("\r\n");
      out.write("    var transEndEventNames = {\r\n");
      out.write("      WebkitTransition : 'webkitTransitionEnd',\r\n");
      out.write("      MozTransition    : 'transitionend',\r\n");
      out.write("      OTransition      : 'oTransitionEnd otransitionend',\r\n");
      out.write("      transition       : 'transitionend'\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (var name in transEndEventNames) {\r\n");
      out.write("      if (el.style[name] !== undefined) {\r\n");
      out.write("        return { end: transEndEventNames[name] }\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false // explicit for ie8 (  ._.)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // http://blog.alexmaccaw.com/css-transitions\r\n");
      out.write("  $.fn.emulateTransitionEnd = function (duration) {\r\n");
      out.write("    var called = false\r\n");
      out.write("    var $el = this\r\n");
      out.write("    $(this).one('bsTransitionEnd', function () { called = true })\r\n");
      out.write("    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\r\n");
      out.write("    setTimeout(callback, duration)\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(function () {\r\n");
      out.write("    $.support.transition = transitionEnd()\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return\r\n");
      out.write("\r\n");
      out.write("    $.event.special.bsTransitionEnd = {\r\n");
      out.write("      bindType: $.support.transition.end,\r\n");
      out.write("      delegateType: $.support.transition.end,\r\n");
      out.write("      handle: function (e) {\r\n");
      out.write("        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: alert.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#alerts\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // ALERT CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var dismiss = '[data-dismiss=\"alert\"]'\r\n");
      out.write("  var Alert   = function (el) {\r\n");
      out.write("    $(el).on('click', dismiss, this.close)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Alert.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Alert.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Alert.prototype.close = function (e) {\r\n");
      out.write("    var $this    = $(this)\r\n");
      out.write("    var selector = $this.attr('data-target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var $parent = $(selector)\r\n");
      out.write("\r\n");
      out.write("    if (e) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    if (!$parent.length) {\r\n");
      out.write("      $parent = $this.closest('.alert')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $parent.trigger(e = $.Event('close.bs.alert'))\r\n");
      out.write("\r\n");
      out.write("    if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    $parent.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("    function removeElement() {\r\n");
      out.write("      // detach from parent, fire event then clean up data\r\n");
      out.write("      $parent.detach().trigger('closed.bs.alert').remove()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && $parent.hasClass('fade') ?\r\n");
      out.write("      $parent\r\n");
      out.write("        .one('bsTransitionEnd', removeElement)\r\n");
      out.write("        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\r\n");
      out.write("      removeElement()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.alert')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.alert', (data = new Alert(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option].call($this)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.alert\r\n");
      out.write("\r\n");
      out.write("  $.fn.alert             = Plugin\r\n");
      out.write("  $.fn.alert.Constructor = Alert\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.alert.noConflict = function () {\r\n");
      out.write("    $.fn.alert = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // ALERT DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: button.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#buttons\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // BUTTON PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ==============================\r\n");
      out.write("\r\n");
      out.write("  var Button = function (element, options) {\r\n");
      out.write("    this.$element  = $(element)\r\n");
      out.write("    this.options   = $.extend({}, Button.DEFAULTS, options)\r\n");
      out.write("    this.isLoading = false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Button.DEFAULTS = {\r\n");
      out.write("    loadingText: 'loading...'\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.prototype.setState = function (state) {\r\n");
      out.write("    var d    = 'disabled'\r\n");
      out.write("    var $el  = this.$element\r\n");
      out.write("    var val  = $el.is('input') ? 'val' : 'html'\r\n");
      out.write("    var data = $el.data()\r\n");
      out.write("\r\n");
      out.write("    state += 'Text'\r\n");
      out.write("\r\n");
      out.write("    if (data.resetText == null) $el.data('resetText', $el[val]())\r\n");
      out.write("\r\n");
      out.write("    // push to event loop to allow forms to submit\r\n");
      out.write("    setTimeout($.proxy(function () {\r\n");
      out.write("      $el[val](data[state] == null ? this.options[state] : data[state])\r\n");
      out.write("\r\n");
      out.write("      if (state == 'loadingText') {\r\n");
      out.write("        this.isLoading = true\r\n");
      out.write("        $el.addClass(d).attr(d, d)\r\n");
      out.write("      } else if (this.isLoading) {\r\n");
      out.write("        this.isLoading = false\r\n");
      out.write("        $el.removeClass(d).removeAttr(d)\r\n");
      out.write("      }\r\n");
      out.write("    }, this), 0)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Button.prototype.toggle = function () {\r\n");
      out.write("    var changed = true\r\n");
      out.write("    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\r\n");
      out.write("\r\n");
      out.write("    if ($parent.length) {\r\n");
      out.write("      var $input = this.$element.find('input')\r\n");
      out.write("      if ($input.prop('type') == 'radio') {\r\n");
      out.write("        if ($input.prop('checked')) changed = false\r\n");
      out.write("        $parent.find('.active').removeClass('active')\r\n");
      out.write("        this.$element.addClass('active')\r\n");
      out.write("      } else if ($input.prop('type') == 'checkbox') {\r\n");
      out.write("        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\r\n");
      out.write("        this.$element.toggleClass('active')\r\n");
      out.write("      }\r\n");
      out.write("      $input.prop('checked', this.$element.hasClass('active'))\r\n");
      out.write("      if (changed) $input.trigger('change')\r\n");
      out.write("    } else {\r\n");
      out.write("      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\r\n");
      out.write("      this.$element.toggleClass('active')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON PLUGIN DEFINITION\r\n");
      out.write("  // ========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.button')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.button', (data = new Button(this, options)))\r\n");
      out.write("\r\n");
      out.write("      if (option == 'toggle') data.toggle()\r\n");
      out.write("      else if (option) data.setState(option)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.button\r\n");
      out.write("\r\n");
      out.write("  $.fn.button             = Plugin\r\n");
      out.write("  $.fn.button.Constructor = Button\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON NO CONFLICT\r\n");
      out.write("  // ==================\r\n");
      out.write("\r\n");
      out.write("  $.fn.button.noConflict = function () {\r\n");
      out.write("    $.fn.button = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // BUTTON DATA-API\r\n");
      out.write("  // ===============\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\r\n");
      out.write("      var $btn = $(e.target)\r\n");
      out.write("      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')\r\n");
      out.write("      Plugin.call($btn, 'toggle')\r\n");
      out.write("      if (!($(e.target).is('input[type=\"radio\"]') || $(e.target).is('input[type=\"checkbox\"]'))) e.preventDefault()\r\n");
      out.write("    })\r\n");
      out.write("    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\r\n");
      out.write("      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: carousel.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#carousel\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL CLASS DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  var Carousel = function (element, options) {\r\n");
      out.write("    this.$element    = $(element)\r\n");
      out.write("    this.$indicators = this.$element.find('.carousel-indicators')\r\n");
      out.write("    this.options     = options\r\n");
      out.write("    this.paused      = null\r\n");
      out.write("    this.sliding     = null\r\n");
      out.write("    this.interval    = null\r\n");
      out.write("    this.$active     = null\r\n");
      out.write("    this.$items      = null\r\n");
      out.write("\r\n");
      out.write("    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\r\n");
      out.write("\r\n");
      out.write("    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\r\n");
      out.write("      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\r\n");
      out.write("      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Carousel.TRANSITION_DURATION = 600\r\n");
      out.write("\r\n");
      out.write("  Carousel.DEFAULTS = {\r\n");
      out.write("    interval: 5000,\r\n");
      out.write("    pause: 'hover',\r\n");
      out.write("    wrap: true,\r\n");
      out.write("    keyboard: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.keydown = function (e) {\r\n");
      out.write("    if (/input|textarea/i.test(e.target.tagName)) return\r\n");
      out.write("    switch (e.which) {\r\n");
      out.write("      case 37: this.prev(); break\r\n");
      out.write("      case 39: this.next(); break\r\n");
      out.write("      default: return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.cycle = function (e) {\r\n");
      out.write("    e || (this.paused = false)\r\n");
      out.write("\r\n");
      out.write("    this.interval && clearInterval(this.interval)\r\n");
      out.write("\r\n");
      out.write("    this.options.interval\r\n");
      out.write("      && !this.paused\r\n");
      out.write("      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.getItemIndex = function (item) {\r\n");
      out.write("    this.$items = item.parent().children('.item')\r\n");
      out.write("    return this.$items.index(item || this.$active)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.getItemForDirection = function (direction, active) {\r\n");
      out.write("    var activeIndex = this.getItemIndex(active)\r\n");
      out.write("    var willWrap = (direction == 'prev' && activeIndex === 0)\r\n");
      out.write("                || (direction == 'next' && activeIndex == (this.$items.length - 1))\r\n");
      out.write("    if (willWrap && !this.options.wrap) return active\r\n");
      out.write("    var delta = direction == 'prev' ? -1 : 1\r\n");
      out.write("    var itemIndex = (activeIndex + delta) % this.$items.length\r\n");
      out.write("    return this.$items.eq(itemIndex)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.to = function (pos) {\r\n");
      out.write("    var that        = this\r\n");
      out.write("    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\r\n");
      out.write("\r\n");
      out.write("    if (pos > (this.$items.length - 1) || pos < 0) return\r\n");
      out.write("\r\n");
      out.write("    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\r\n");
      out.write("    if (activeIndex == pos) return this.pause().cycle()\r\n");
      out.write("\r\n");
      out.write("    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.pause = function (e) {\r\n");
      out.write("    e || (this.paused = true)\r\n");
      out.write("\r\n");
      out.write("    if (this.$element.find('.next, .prev').length && $.support.transition) {\r\n");
      out.write("      this.$element.trigger($.support.transition.end)\r\n");
      out.write("      this.cycle(true)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.interval = clearInterval(this.interval)\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.next = function () {\r\n");
      out.write("    if (this.sliding) return\r\n");
      out.write("    return this.slide('next')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.prev = function () {\r\n");
      out.write("    if (this.sliding) return\r\n");
      out.write("    return this.slide('prev')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Carousel.prototype.slide = function (type, next) {\r\n");
      out.write("    var $active   = this.$element.find('.item.active')\r\n");
      out.write("    var $next     = next || this.getItemForDirection(type, $active)\r\n");
      out.write("    var isCycling = this.interval\r\n");
      out.write("    var direction = type == 'next' ? 'left' : 'right'\r\n");
      out.write("    var that      = this\r\n");
      out.write("\r\n");
      out.write("    if ($next.hasClass('active')) return (this.sliding = false)\r\n");
      out.write("\r\n");
      out.write("    var relatedTarget = $next[0]\r\n");
      out.write("    var slideEvent = $.Event('slide.bs.carousel', {\r\n");
      out.write("      relatedTarget: relatedTarget,\r\n");
      out.write("      direction: direction\r\n");
      out.write("    })\r\n");
      out.write("    this.$element.trigger(slideEvent)\r\n");
      out.write("    if (slideEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.sliding = true\r\n");
      out.write("\r\n");
      out.write("    isCycling && this.pause()\r\n");
      out.write("\r\n");
      out.write("    if (this.$indicators.length) {\r\n");
      out.write("      this.$indicators.find('.active').removeClass('active')\r\n");
      out.write("      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\r\n");
      out.write("      $nextIndicator && $nextIndicator.addClass('active')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\r\n");
      out.write("    if ($.support.transition && this.$element.hasClass('slide')) {\r\n");
      out.write("      $next.addClass(type)\r\n");
      out.write("      $next[0].offsetWidth // force reflow\r\n");
      out.write("      $active.addClass(direction)\r\n");
      out.write("      $next.addClass(direction)\r\n");
      out.write("      $active\r\n");
      out.write("        .one('bsTransitionEnd', function () {\r\n");
      out.write("          $next.removeClass([type, direction].join(' ')).addClass('active')\r\n");
      out.write("          $active.removeClass(['active', direction].join(' '))\r\n");
      out.write("          that.sliding = false\r\n");
      out.write("          setTimeout(function () {\r\n");
      out.write("            that.$element.trigger(slidEvent)\r\n");
      out.write("          }, 0)\r\n");
      out.write("        })\r\n");
      out.write("        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\r\n");
      out.write("    } else {\r\n");
      out.write("      $active.removeClass('active')\r\n");
      out.write("      $next.addClass('active')\r\n");
      out.write("      this.sliding = false\r\n");
      out.write("      this.$element.trigger(slidEvent)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    isCycling && this.cycle()\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.carousel')\r\n");
      out.write("      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("      var action  = typeof option == 'string' ? option : options.slide\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\r\n");
      out.write("      if (typeof option == 'number') data.to(option)\r\n");
      out.write("      else if (action) data[action]()\r\n");
      out.write("      else if (options.interval) data.pause().cycle()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.carousel\r\n");
      out.write("\r\n");
      out.write("  $.fn.carousel             = Plugin\r\n");
      out.write("  $.fn.carousel.Constructor = Carousel\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.carousel.noConflict = function () {\r\n");
      out.write("    $.fn.carousel = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // CAROUSEL DATA-API\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  var clickHandler = function (e) {\r\n");
      out.write("    var href\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\r\n");
      out.write("    if (!$target.hasClass('carousel')) return\r\n");
      out.write("    var options = $.extend({}, $target.data(), $this.data())\r\n");
      out.write("    var slideIndex = $this.attr('data-slide-to')\r\n");
      out.write("    if (slideIndex) options.interval = false\r\n");
      out.write("\r\n");
      out.write("    Plugin.call($target, options)\r\n");
      out.write("\r\n");
      out.write("    if (slideIndex) {\r\n");
      out.write("      $target.data('bs.carousel').to(slideIndex)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\r\n");
      out.write("    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load', function () {\r\n");
      out.write("    $('[data-ride=\"carousel\"]').each(function () {\r\n");
      out.write("      var $carousel = $(this)\r\n");
      out.write("      Plugin.call($carousel, $carousel.data())\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: collapse.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#collapse\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ================================\r\n");
      out.write("\r\n");
      out.write("  var Collapse = function (element, options) {\r\n");
      out.write("    this.$element      = $(element)\r\n");
      out.write("    this.options       = $.extend({}, Collapse.DEFAULTS, options)\r\n");
      out.write("    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\r\n");
      out.write("                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\r\n");
      out.write("    this.transitioning = null\r\n");
      out.write("\r\n");
      out.write("    if (this.options.parent) {\r\n");
      out.write("      this.$parent = this.getParent()\r\n");
      out.write("    } else {\r\n");
      out.write("      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (this.options.toggle) this.toggle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Collapse.TRANSITION_DURATION = 350\r\n");
      out.write("\r\n");
      out.write("  Collapse.DEFAULTS = {\r\n");
      out.write("    toggle: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.dimension = function () {\r\n");
      out.write("    var hasWidth = this.$element.hasClass('width')\r\n");
      out.write("    return hasWidth ? 'width' : 'height'\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.show = function () {\r\n");
      out.write("    if (this.transitioning || this.$element.hasClass('in')) return\r\n");
      out.write("\r\n");
      out.write("    var activesData\r\n");
      out.write("    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\r\n");
      out.write("\r\n");
      out.write("    if (actives && actives.length) {\r\n");
      out.write("      activesData = actives.data('bs.collapse')\r\n");
      out.write("      if (activesData && activesData.transitioning) return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var startEvent = $.Event('show.bs.collapse')\r\n");
      out.write("    this.$element.trigger(startEvent)\r\n");
      out.write("    if (startEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    if (actives && actives.length) {\r\n");
      out.write("      Plugin.call(actives, 'hide')\r\n");
      out.write("      activesData || actives.data('bs.collapse', null)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var dimension = this.dimension()\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .removeClass('collapse')\r\n");
      out.write("      .addClass('collapsing')[dimension](0)\r\n");
      out.write("      .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("    this.$trigger\r\n");
      out.write("      .removeClass('collapsed')\r\n");
      out.write("      .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("    this.transitioning = 1\r\n");
      out.write("\r\n");
      out.write("    var complete = function () {\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass('collapsing')\r\n");
      out.write("        .addClass('collapse in')[dimension]('')\r\n");
      out.write("      this.transitioning = 0\r\n");
      out.write("      this.$element\r\n");
      out.write("        .trigger('shown.bs.collapse')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return complete.call(this)\r\n");
      out.write("\r\n");
      out.write("    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .one('bsTransitionEnd', $.proxy(complete, this))\r\n");
      out.write("      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.hide = function () {\r\n");
      out.write("    if (this.transitioning || !this.$element.hasClass('in')) return\r\n");
      out.write("\r\n");
      out.write("    var startEvent = $.Event('hide.bs.collapse')\r\n");
      out.write("    this.$element.trigger(startEvent)\r\n");
      out.write("    if (startEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    var dimension = this.dimension()\r\n");
      out.write("\r\n");
      out.write("    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .addClass('collapsing')\r\n");
      out.write("      .removeClass('collapse in')\r\n");
      out.write("      .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("    this.$trigger\r\n");
      out.write("      .addClass('collapsed')\r\n");
      out.write("      .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("    this.transitioning = 1\r\n");
      out.write("\r\n");
      out.write("    var complete = function () {\r\n");
      out.write("      this.transitioning = 0\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass('collapsing')\r\n");
      out.write("        .addClass('collapse')\r\n");
      out.write("        .trigger('hidden.bs.collapse')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (!$.support.transition) return complete.call(this)\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      [dimension](0)\r\n");
      out.write("      .one('bsTransitionEnd', $.proxy(complete, this))\r\n");
      out.write("      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.toggle = function () {\r\n");
      out.write("    this[this.$element.hasClass('in') ? 'hide' : 'show']()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.getParent = function () {\r\n");
      out.write("    return $(this.options.parent)\r\n");
      out.write("      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\r\n");
      out.write("      .each($.proxy(function (i, element) {\r\n");
      out.write("        var $element = $(element)\r\n");
      out.write("        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\r\n");
      out.write("      }, this))\r\n");
      out.write("      .end()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\r\n");
      out.write("    var isOpen = $element.hasClass('in')\r\n");
      out.write("\r\n");
      out.write("    $element.attr('aria-expanded', isOpen)\r\n");
      out.write("    $trigger\r\n");
      out.write("      .toggleClass('collapsed', !isOpen)\r\n");
      out.write("      .attr('aria-expanded', isOpen)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function getTargetFromTrigger($trigger) {\r\n");
      out.write("    var href\r\n");
      out.write("    var target = $trigger.attr('data-target')\r\n");
      out.write("      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\r\n");
      out.write("\r\n");
      out.write("    return $(target)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.collapse')\r\n");
      out.write("      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("\r\n");
      out.write("      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\r\n");
      out.write("      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.collapse\r\n");
      out.write("\r\n");
      out.write("  $.fn.collapse             = Plugin\r\n");
      out.write("  $.fn.collapse.Constructor = Collapse\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.collapse.noConflict = function () {\r\n");
      out.write("    $.fn.collapse = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // COLLAPSE DATA-API\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("\r\n");
      out.write("    if (!$this.attr('data-target')) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    var $target = getTargetFromTrigger($this)\r\n");
      out.write("    var data    = $target.data('bs.collapse')\r\n");
      out.write("    var option  = data ? 'toggle' : $this.data()\r\n");
      out.write("\r\n");
      out.write("    Plugin.call($target, option)\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: dropdown.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#dropdowns\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN CLASS DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  var backdrop = '.dropdown-backdrop'\r\n");
      out.write("  var toggle   = '[data-toggle=\"dropdown\"]'\r\n");
      out.write("  var Dropdown = function (element) {\r\n");
      out.write("    $(element).on('click.bs.dropdown', this.toggle)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  function getParent($this) {\r\n");
      out.write("    var selector = $this.attr('data-target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var $parent = selector && $(selector)\r\n");
      out.write("\r\n");
      out.write("    return $parent && $parent.length ? $parent : $this.parent()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function clearMenus(e) {\r\n");
      out.write("    if (e && e.which === 3) return\r\n");
      out.write("    $(backdrop).remove()\r\n");
      out.write("    $(toggle).each(function () {\r\n");
      out.write("      var $this         = $(this)\r\n");
      out.write("      var $parent       = getParent($this)\r\n");
      out.write("      var relatedTarget = { relatedTarget: this }\r\n");
      out.write("\r\n");
      out.write("      if (!$parent.hasClass('open')) return\r\n");
      out.write("\r\n");
      out.write("      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\r\n");
      out.write("\r\n");
      out.write("      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      $this.attr('aria-expanded', 'false')\r\n");
      out.write("      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.prototype.toggle = function (e) {\r\n");
      out.write("    var $this = $(this)\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('.disabled, :disabled')) return\r\n");
      out.write("\r\n");
      out.write("    var $parent  = getParent($this)\r\n");
      out.write("    var isActive = $parent.hasClass('open')\r\n");
      out.write("\r\n");
      out.write("    clearMenus()\r\n");
      out.write("\r\n");
      out.write("    if (!isActive) {\r\n");
      out.write("      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\r\n");
      out.write("        // if mobile we use a backdrop because click events don't delegate\r\n");
      out.write("        $(document.createElement('div'))\r\n");
      out.write("          .addClass('dropdown-backdrop')\r\n");
      out.write("          .insertAfter($(this))\r\n");
      out.write("          .on('click', clearMenus)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      var relatedTarget = { relatedTarget: this }\r\n");
      out.write("      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      $this\r\n");
      out.write("        .trigger('focus')\r\n");
      out.write("        .attr('aria-expanded', 'true')\r\n");
      out.write("\r\n");
      out.write("      $parent\r\n");
      out.write("        .toggleClass('open')\r\n");
      out.write("        .trigger($.Event('shown.bs.dropdown', relatedTarget))\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Dropdown.prototype.keydown = function (e) {\r\n");
      out.write("    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\r\n");
      out.write("\r\n");
      out.write("    var $this = $(this)\r\n");
      out.write("\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("    e.stopPropagation()\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('.disabled, :disabled')) return\r\n");
      out.write("\r\n");
      out.write("    var $parent  = getParent($this)\r\n");
      out.write("    var isActive = $parent.hasClass('open')\r\n");
      out.write("\r\n");
      out.write("    if (!isActive && e.which != 27 || isActive && e.which == 27) {\r\n");
      out.write("      if (e.which == 27) $parent.find(toggle).trigger('focus')\r\n");
      out.write("      return $this.trigger('click')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var desc = ' li:not(.disabled):visible a'\r\n");
      out.write("    var $items = $parent.find('.dropdown-menu' + desc)\r\n");
      out.write("\r\n");
      out.write("    if (!$items.length) return\r\n");
      out.write("\r\n");
      out.write("    var index = $items.index(e.target)\r\n");
      out.write("\r\n");
      out.write("    if (e.which == 38 && index > 0)                 index--         // up\r\n");
      out.write("    if (e.which == 40 && index < $items.length - 1) index++         // down\r\n");
      out.write("    if (!~index)                                    index = 0\r\n");
      out.write("\r\n");
      out.write("    $items.eq(index).trigger('focus')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN PLUGIN DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.dropdown')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option].call($this)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.dropdown\r\n");
      out.write("\r\n");
      out.write("  $.fn.dropdown             = Plugin\r\n");
      out.write("  $.fn.dropdown.Constructor = Dropdown\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // DROPDOWN NO CONFLICT\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.dropdown.noConflict = function () {\r\n");
      out.write("    $.fn.dropdown = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // APPLY TO STANDARD DROPDOWN ELEMENTS\r\n");
      out.write("  // ===================================\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.dropdown.data-api', clearMenus)\r\n");
      out.write("    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\r\n");
      out.write("    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\r\n");
      out.write("    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\r\n");
      out.write("    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: modal.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#modals\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // MODAL CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var Modal = function (element, options) {\r\n");
      out.write("    this.options             = options\r\n");
      out.write("    this.$body               = $(document.body)\r\n");
      out.write("    this.$element            = $(element)\r\n");
      out.write("    this.$dialog             = this.$element.find('.modal-dialog')\r\n");
      out.write("    this.$backdrop           = null\r\n");
      out.write("    this.isShown             = null\r\n");
      out.write("    this.originalBodyPad     = null\r\n");
      out.write("    this.scrollbarWidth      = 0\r\n");
      out.write("    this.ignoreBackdropClick = false\r\n");
      out.write("\r\n");
      out.write("    if (this.options.remote) {\r\n");
      out.write("      this.$element\r\n");
      out.write("        .find('.modal-content')\r\n");
      out.write("        .load(this.options.remote, $.proxy(function () {\r\n");
      out.write("          this.$element.trigger('loaded.bs.modal')\r\n");
      out.write("        }, this))\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Modal.TRANSITION_DURATION = 300\r\n");
      out.write("  Modal.BACKDROP_TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Modal.DEFAULTS = {\r\n");
      out.write("    backdrop: true,\r\n");
      out.write("    keyboard: true,\r\n");
      out.write("    show: true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.toggle = function (_relatedTarget) {\r\n");
      out.write("    return this.isShown ? this.hide() : this.show(_relatedTarget)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.show = function (_relatedTarget) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (this.isShown || e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.isShown = true\r\n");
      out.write("\r\n");
      out.write("    this.checkScrollbar()\r\n");
      out.write("    this.setScrollbar()\r\n");
      out.write("    this.$body.addClass('modal-open')\r\n");
      out.write("\r\n");
      out.write("    this.escape()\r\n");
      out.write("    this.resize()\r\n");
      out.write("\r\n");
      out.write("    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\r\n");
      out.write("\r\n");
      out.write("    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\r\n");
      out.write("      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\r\n");
      out.write("        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    this.backdrop(function () {\r\n");
      out.write("      var transition = $.support.transition && that.$element.hasClass('fade')\r\n");
      out.write("\r\n");
      out.write("      if (!that.$element.parent().length) {\r\n");
      out.write("        that.$element.appendTo(that.$body) // don't move modals dom position\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      that.$element\r\n");
      out.write("        .show()\r\n");
      out.write("        .scrollTop(0)\r\n");
      out.write("\r\n");
      out.write("      that.adjustDialog()\r\n");
      out.write("\r\n");
      out.write("      if (transition) {\r\n");
      out.write("        that.$element[0].offsetWidth // force reflow\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      that.$element.addClass('in')\r\n");
      out.write("\r\n");
      out.write("      that.enforceFocus()\r\n");
      out.write("\r\n");
      out.write("      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\r\n");
      out.write("\r\n");
      out.write("      transition ?\r\n");
      out.write("        that.$dialog // wait for modal to slide in\r\n");
      out.write("          .one('bsTransitionEnd', function () {\r\n");
      out.write("            that.$element.trigger('focus').trigger(e)\r\n");
      out.write("          })\r\n");
      out.write("          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\r\n");
      out.write("        that.$element.trigger('focus').trigger(e)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.hide = function (e) {\r\n");
      out.write("    if (e) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    e = $.Event('hide.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (!this.isShown || e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    this.isShown = false\r\n");
      out.write("\r\n");
      out.write("    this.escape()\r\n");
      out.write("    this.resize()\r\n");
      out.write("\r\n");
      out.write("    $(document).off('focusin.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$element\r\n");
      out.write("      .removeClass('in')\r\n");
      out.write("      .off('click.dismiss.bs.modal')\r\n");
      out.write("      .off('mouseup.dismiss.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    this.$dialog.off('mousedown.dismiss.bs.modal')\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && this.$element.hasClass('fade') ?\r\n");
      out.write("      this.$element\r\n");
      out.write("        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\r\n");
      out.write("        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\r\n");
      out.write("      this.hideModal()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.enforceFocus = function () {\r\n");
      out.write("    $(document)\r\n");
      out.write("      .off('focusin.bs.modal') // guard against infinite focus loop\r\n");
      out.write("      .on('focusin.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {\r\n");
      out.write("          this.$element.trigger('focus')\r\n");
      out.write("        }\r\n");
      out.write("      }, this))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.escape = function () {\r\n");
      out.write("    if (this.isShown && this.options.keyboard) {\r\n");
      out.write("      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        e.which == 27 && this.hide()\r\n");
      out.write("      }, this))\r\n");
      out.write("    } else if (!this.isShown) {\r\n");
      out.write("      this.$element.off('keydown.dismiss.bs.modal')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resize = function () {\r\n");
      out.write("    if (this.isShown) {\r\n");
      out.write("      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\r\n");
      out.write("    } else {\r\n");
      out.write("      $(window).off('resize.bs.modal')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.hideModal = function () {\r\n");
      out.write("    var that = this\r\n");
      out.write("    this.$element.hide()\r\n");
      out.write("    this.backdrop(function () {\r\n");
      out.write("      that.$body.removeClass('modal-open')\r\n");
      out.write("      that.resetAdjustments()\r\n");
      out.write("      that.resetScrollbar()\r\n");
      out.write("      that.$element.trigger('hidden.bs.modal')\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.removeBackdrop = function () {\r\n");
      out.write("    this.$backdrop && this.$backdrop.remove()\r\n");
      out.write("    this.$backdrop = null\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.backdrop = function (callback) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var animate = this.$element.hasClass('fade') ? 'fade' : ''\r\n");
      out.write("\r\n");
      out.write("    if (this.isShown && this.options.backdrop) {\r\n");
      out.write("      var doAnimate = $.support.transition && animate\r\n");
      out.write("\r\n");
      out.write("      this.$backdrop = $(document.createElement('div'))\r\n");
      out.write("        .addClass('modal-backdrop ' + animate)\r\n");
      out.write("        .appendTo(this.$body)\r\n");
      out.write("\r\n");
      out.write("      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\r\n");
      out.write("        if (this.ignoreBackdropClick) {\r\n");
      out.write("          this.ignoreBackdropClick = false\r\n");
      out.write("          return\r\n");
      out.write("        }\r\n");
      out.write("        if (e.target !== e.currentTarget) return\r\n");
      out.write("        this.options.backdrop == 'static'\r\n");
      out.write("          ? this.$element[0].focus()\r\n");
      out.write("          : this.hide()\r\n");
      out.write("      }, this))\r\n");
      out.write("\r\n");
      out.write("      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\r\n");
      out.write("\r\n");
      out.write("      this.$backdrop.addClass('in')\r\n");
      out.write("\r\n");
      out.write("      if (!callback) return\r\n");
      out.write("\r\n");
      out.write("      doAnimate ?\r\n");
      out.write("        this.$backdrop\r\n");
      out.write("          .one('bsTransitionEnd', callback)\r\n");
      out.write("          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\r\n");
      out.write("        callback()\r\n");
      out.write("\r\n");
      out.write("    } else if (!this.isShown && this.$backdrop) {\r\n");
      out.write("      this.$backdrop.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("      var callbackRemove = function () {\r\n");
      out.write("        that.removeBackdrop()\r\n");
      out.write("        callback && callback()\r\n");
      out.write("      }\r\n");
      out.write("      $.support.transition && this.$element.hasClass('fade') ?\r\n");
      out.write("        this.$backdrop\r\n");
      out.write("          .one('bsTransitionEnd', callbackRemove)\r\n");
      out.write("          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\r\n");
      out.write("        callbackRemove()\r\n");
      out.write("\r\n");
      out.write("    } else if (callback) {\r\n");
      out.write("      callback()\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // these following methods are used to handle overflowing modals\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.handleUpdate = function () {\r\n");
      out.write("    this.adjustDialog()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.adjustDialog = function () {\r\n");
      out.write("    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\r\n");
      out.write("\r\n");
      out.write("    this.$element.css({\r\n");
      out.write("      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\r\n");
      out.write("      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resetAdjustments = function () {\r\n");
      out.write("    this.$element.css({\r\n");
      out.write("      paddingLeft: '',\r\n");
      out.write("      paddingRight: ''\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.checkScrollbar = function () {\r\n");
      out.write("    var fullWindowWidth = window.innerWidth\r\n");
      out.write("    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\r\n");
      out.write("      var documentElementRect = document.documentElement.getBoundingClientRect()\r\n");
      out.write("      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\r\n");
      out.write("    }\r\n");
      out.write("    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\r\n");
      out.write("    this.scrollbarWidth = this.measureScrollbar()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.setScrollbar = function () {\r\n");
      out.write("    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\r\n");
      out.write("    this.originalBodyPad = document.body.style.paddingRight || ''\r\n");
      out.write("    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.resetScrollbar = function () {\r\n");
      out.write("    this.$body.css('padding-right', this.originalBodyPad)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Modal.prototype.measureScrollbar = function () { // thx walsh\r\n");
      out.write("    var scrollDiv = document.createElement('div')\r\n");
      out.write("    scrollDiv.className = 'modal-scrollbar-measure'\r\n");
      out.write("    this.$body.append(scrollDiv)\r\n");
      out.write("    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\r\n");
      out.write("    this.$body[0].removeChild(scrollDiv)\r\n");
      out.write("    return scrollbarWidth\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option, _relatedTarget) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.modal')\r\n");
      out.write("      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option](_relatedTarget)\r\n");
      out.write("      else if (options.show) data.show(_relatedTarget)\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.modal\r\n");
      out.write("\r\n");
      out.write("  $.fn.modal             = Plugin\r\n");
      out.write("  $.fn.modal.Constructor = Modal\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.modal.noConflict = function () {\r\n");
      out.write("    $.fn.modal = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // MODAL DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\r\n");
      out.write("    var $this   = $(this)\r\n");
      out.write("    var href    = $this.attr('href')\r\n");
      out.write("    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\r\n");
      out.write("    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\r\n");
      out.write("\r\n");
      out.write("    if ($this.is('a')) e.preventDefault()\r\n");
      out.write("\r\n");
      out.write("    $target.one('show.bs.modal', function (showEvent) {\r\n");
      out.write("      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\r\n");
      out.write("      $target.one('hidden.bs.modal', function () {\r\n");
      out.write("        $this.is(':visible') && $this.trigger('focus')\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("    Plugin.call($target, option, this)\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: tooltip.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#tooltip\r\n");
      out.write(" * Inspired by the original jQuery.tipsy by Jason Frame\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ===============================\r\n");
      out.write("\r\n");
      out.write("  var Tooltip = function (element, options) {\r\n");
      out.write("    this.type       = null\r\n");
      out.write("    this.options    = null\r\n");
      out.write("    this.enabled    = null\r\n");
      out.write("    this.timeout    = null\r\n");
      out.write("    this.hoverState = null\r\n");
      out.write("    this.$element   = null\r\n");
      out.write("    this.inState    = null\r\n");
      out.write("\r\n");
      out.write("    this.init('tooltip', element, options)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Tooltip.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Tooltip.DEFAULTS = {\r\n");
      out.write("    animation: true,\r\n");
      out.write("    placement: 'top',\r\n");
      out.write("    selector: false,\r\n");
      out.write("    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n");
      out.write("    trigger: 'hover focus',\r\n");
      out.write("    title: '',\r\n");
      out.write("    delay: 0,\r\n");
      out.write("    html: false,\r\n");
      out.write("    container: false,\r\n");
      out.write("    viewport: {\r\n");
      out.write("      selector: 'body',\r\n");
      out.write("      padding: 0\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.init = function (type, element, options) {\r\n");
      out.write("    this.enabled   = true\r\n");
      out.write("    this.type      = type\r\n");
      out.write("    this.$element  = $(element)\r\n");
      out.write("    this.options   = this.getOptions(options)\r\n");
      out.write("    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\r\n");
      out.write("    this.inState   = { click: false, hover: false, focus: false }\r\n");
      out.write("\r\n");
      out.write("    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\r\n");
      out.write("      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var triggers = this.options.trigger.split(' ')\r\n");
      out.write("\r\n");
      out.write("    for (var i = triggers.length; i--;) {\r\n");
      out.write("      var trigger = triggers[i]\r\n");
      out.write("\r\n");
      out.write("      if (trigger == 'click') {\r\n");
      out.write("        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\r\n");
      out.write("      } else if (trigger != 'manual') {\r\n");
      out.write("        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\r\n");
      out.write("        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\r\n");
      out.write("\r\n");
      out.write("        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\r\n");
      out.write("        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.options.selector ?\r\n");
      out.write("      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\r\n");
      out.write("      this.fixTitle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getDefaults = function () {\r\n");
      out.write("    return Tooltip.DEFAULTS\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getOptions = function (options) {\r\n");
      out.write("    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\r\n");
      out.write("\r\n");
      out.write("    if (options.delay && typeof options.delay == 'number') {\r\n");
      out.write("      options.delay = {\r\n");
      out.write("        show: options.delay,\r\n");
      out.write("        hide: options.delay\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return options\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getDelegateOptions = function () {\r\n");
      out.write("    var options  = {}\r\n");
      out.write("    var defaults = this.getDefaults()\r\n");
      out.write("\r\n");
      out.write("    this._options && $.each(this._options, function (key, value) {\r\n");
      out.write("      if (defaults[key] != value) options[key] = value\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    return options\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.enter = function (obj) {\r\n");
      out.write("    var self = obj instanceof this.constructor ?\r\n");
      out.write("      obj : $(obj.currentTarget).data('bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (!self) {\r\n");
      out.write("      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\r\n");
      out.write("      $(obj.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (obj instanceof $.Event) {\r\n");
      out.write("      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (self.tip().hasClass('in') || self.hoverState == 'in') {\r\n");
      out.write("      self.hoverState = 'in'\r\n");
      out.write("      return\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    clearTimeout(self.timeout)\r\n");
      out.write("\r\n");
      out.write("    self.hoverState = 'in'\r\n");
      out.write("\r\n");
      out.write("    if (!self.options.delay || !self.options.delay.show) return self.show()\r\n");
      out.write("\r\n");
      out.write("    self.timeout = setTimeout(function () {\r\n");
      out.write("      if (self.hoverState == 'in') self.show()\r\n");
      out.write("    }, self.options.delay.show)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.isInStateTrue = function () {\r\n");
      out.write("    for (var key in this.inState) {\r\n");
      out.write("      if (this.inState[key]) return true\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.leave = function (obj) {\r\n");
      out.write("    var self = obj instanceof this.constructor ?\r\n");
      out.write("      obj : $(obj.currentTarget).data('bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (!self) {\r\n");
      out.write("      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\r\n");
      out.write("      $(obj.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (obj instanceof $.Event) {\r\n");
      out.write("      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (self.isInStateTrue()) return\r\n");
      out.write("\r\n");
      out.write("    clearTimeout(self.timeout)\r\n");
      out.write("\r\n");
      out.write("    self.hoverState = 'out'\r\n");
      out.write("\r\n");
      out.write("    if (!self.options.delay || !self.options.delay.hide) return self.hide()\r\n");
      out.write("\r\n");
      out.write("    self.timeout = setTimeout(function () {\r\n");
      out.write("      if (self.hoverState == 'out') self.hide()\r\n");
      out.write("    }, self.options.delay.hide)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.show = function () {\r\n");
      out.write("    var e = $.Event('show.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    if (this.hasContent() && this.enabled) {\r\n");
      out.write("      this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\r\n");
      out.write("      if (e.isDefaultPrevented() || !inDom) return\r\n");
      out.write("      var that = this\r\n");
      out.write("\r\n");
      out.write("      var $tip = this.tip()\r\n");
      out.write("\r\n");
      out.write("      var tipId = this.getUID(this.type)\r\n");
      out.write("\r\n");
      out.write("      this.setContent()\r\n");
      out.write("      $tip.attr('id', tipId)\r\n");
      out.write("      this.$element.attr('aria-describedby', tipId)\r\n");
      out.write("\r\n");
      out.write("      if (this.options.animation) $tip.addClass('fade')\r\n");
      out.write("\r\n");
      out.write("      var placement = typeof this.options.placement == 'function' ?\r\n");
      out.write("        this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n");
      out.write("        this.options.placement\r\n");
      out.write("\r\n");
      out.write("      var autoToken = /\\s?auto?\\s?/i\r\n");
      out.write("      var autoPlace = autoToken.test(placement)\r\n");
      out.write("      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\r\n");
      out.write("\r\n");
      out.write("      $tip\r\n");
      out.write("        .detach()\r\n");
      out.write("        .css({ top: 0, left: 0, display: 'block' })\r\n");
      out.write("        .addClass(placement)\r\n");
      out.write("        .data('bs.' + this.type, this)\r\n");
      out.write("\r\n");
      out.write("      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\r\n");
      out.write("      this.$element.trigger('inserted.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("      var pos          = this.getPosition()\r\n");
      out.write("      var actualWidth  = $tip[0].offsetWidth\r\n");
      out.write("      var actualHeight = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("      if (autoPlace) {\r\n");
      out.write("        var orgPlacement = placement\r\n");
      out.write("        var viewportDim = this.getPosition(this.$viewport)\r\n");
      out.write("\r\n");
      out.write("        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\r\n");
      out.write("                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\r\n");
      out.write("                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\r\n");
      out.write("                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\r\n");
      out.write("                    placement\r\n");
      out.write("\r\n");
      out.write("        $tip\r\n");
      out.write("          .removeClass(orgPlacement)\r\n");
      out.write("          .addClass(placement)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\r\n");
      out.write("\r\n");
      out.write("      this.applyPlacement(calculatedOffset, placement)\r\n");
      out.write("\r\n");
      out.write("      var complete = function () {\r\n");
      out.write("        var prevHoverState = that.hoverState\r\n");
      out.write("        that.$element.trigger('shown.bs.' + that.type)\r\n");
      out.write("        that.hoverState = null\r\n");
      out.write("\r\n");
      out.write("        if (prevHoverState == 'out') that.leave(that)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      $.support.transition && this.$tip.hasClass('fade') ?\r\n");
      out.write("        $tip\r\n");
      out.write("          .one('bsTransitionEnd', complete)\r\n");
      out.write("          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n");
      out.write("        complete()\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.applyPlacement = function (offset, placement) {\r\n");
      out.write("    var $tip   = this.tip()\r\n");
      out.write("    var width  = $tip[0].offsetWidth\r\n");
      out.write("    var height = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    // manually read margins because getBoundingClientRect includes difference\r\n");
      out.write("    var marginTop = parseInt($tip.css('margin-top'), 10)\r\n");
      out.write("    var marginLeft = parseInt($tip.css('margin-left'), 10)\r\n");
      out.write("\r\n");
      out.write("    // we must check for NaN for ie 8/9\r\n");
      out.write("    if (isNaN(marginTop))  marginTop  = 0\r\n");
      out.write("    if (isNaN(marginLeft)) marginLeft = 0\r\n");
      out.write("\r\n");
      out.write("    offset.top  += marginTop\r\n");
      out.write("    offset.left += marginLeft\r\n");
      out.write("\r\n");
      out.write("    // $.fn.offset doesn't round pixel values\r\n");
      out.write("    // so we use setOffset directly with our own function B-0\r\n");
      out.write("    $.offset.setOffset($tip[0], $.extend({\r\n");
      out.write("      using: function (props) {\r\n");
      out.write("        $tip.css({\r\n");
      out.write("          top: Math.round(props.top),\r\n");
      out.write("          left: Math.round(props.left)\r\n");
      out.write("        })\r\n");
      out.write("      }\r\n");
      out.write("    }, offset), 0)\r\n");
      out.write("\r\n");
      out.write("    $tip.addClass('in')\r\n");
      out.write("\r\n");
      out.write("    // check to see if placing tip in new offset caused the tip to resize itself\r\n");
      out.write("    var actualWidth  = $tip[0].offsetWidth\r\n");
      out.write("    var actualHeight = $tip[0].offsetHeight\r\n");
      out.write("\r\n");
      out.write("    if (placement == 'top' && actualHeight != height) {\r\n");
      out.write("      offset.top = offset.top + height - actualHeight\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\r\n");
      out.write("\r\n");
      out.write("    if (delta.left) offset.left += delta.left\r\n");
      out.write("    else offset.top += delta.top\r\n");
      out.write("\r\n");
      out.write("    var isVertical          = /top|bottom/.test(placement)\r\n");
      out.write("    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\r\n");
      out.write("    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\r\n");
      out.write("\r\n");
      out.write("    $tip.offset(offset)\r\n");
      out.write("    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\r\n");
      out.write("    this.arrow()\r\n");
      out.write("      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n");
      out.write("      .css(isVertical ? 'top' : 'left', '')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.setContent = function () {\r\n");
      out.write("    var $tip  = this.tip()\r\n");
      out.write("    var title = this.getTitle()\r\n");
      out.write("\r\n");
      out.write("    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\r\n");
      out.write("    $tip.removeClass('fade in top bottom left right')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.hide = function (callback) {\r\n");
      out.write("    var that = this\r\n");
      out.write("    var $tip = $(this.$tip)\r\n");
      out.write("    var e    = $.Event('hide.bs.' + this.type)\r\n");
      out.write("\r\n");
      out.write("    function complete() {\r\n");
      out.write("      if (that.hoverState != 'in') $tip.detach()\r\n");
      out.write("      that.$element\r\n");
      out.write("        .removeAttr('aria-describedby')\r\n");
      out.write("        .trigger('hidden.bs.' + that.type)\r\n");
      out.write("      callback && callback()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("    if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    $tip.removeClass('in')\r\n");
      out.write("\r\n");
      out.write("    $.support.transition && $tip.hasClass('fade') ?\r\n");
      out.write("      $tip\r\n");
      out.write("        .one('bsTransitionEnd', complete)\r\n");
      out.write("        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n");
      out.write("      complete()\r\n");
      out.write("\r\n");
      out.write("    this.hoverState = null\r\n");
      out.write("\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.fixTitle = function () {\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\r\n");
      out.write("      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.hasContent = function () {\r\n");
      out.write("    return this.getTitle()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getPosition = function ($element) {\r\n");
      out.write("    $element   = $element || this.$element\r\n");
      out.write("\r\n");
      out.write("    var el     = $element[0]\r\n");
      out.write("    var isBody = el.tagName == 'BODY'\r\n");
      out.write("\r\n");
      out.write("    var elRect    = el.getBoundingClientRect()\r\n");
      out.write("    if (elRect.width == null) {\r\n");
      out.write("      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n");
      out.write("      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\r\n");
      out.write("    }\r\n");
      out.write("    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()\r\n");
      out.write("    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\r\n");
      out.write("    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\r\n");
      out.write("\r\n");
      out.write("    return $.extend({}, elRect, scroll, outerDims, elOffset)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\r\n");
      out.write("    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\r\n");
      out.write("           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\r\n");
      out.write("           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\r\n");
      out.write("        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\r\n");
      out.write("\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\r\n");
      out.write("    var delta = { top: 0, left: 0 }\r\n");
      out.write("    if (!this.$viewport) return delta\r\n");
      out.write("\r\n");
      out.write("    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\r\n");
      out.write("    var viewportDimensions = this.getPosition(this.$viewport)\r\n");
      out.write("\r\n");
      out.write("    if (/right|left/.test(placement)) {\r\n");
      out.write("      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\r\n");
      out.write("      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\r\n");
      out.write("      if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n");
      out.write("        delta.top = viewportDimensions.top - topEdgeOffset\r\n");
      out.write("      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n");
      out.write("        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\r\n");
      out.write("      }\r\n");
      out.write("    } else {\r\n");
      out.write("      var leftEdgeOffset  = pos.left - viewportPadding\r\n");
      out.write("      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\r\n");
      out.write("      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n");
      out.write("        delta.left = viewportDimensions.left - leftEdgeOffset\r\n");
      out.write("      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n");
      out.write("        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return delta\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getTitle = function () {\r\n");
      out.write("    var title\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    var o  = this.options\r\n");
      out.write("\r\n");
      out.write("    title = $e.attr('data-original-title')\r\n");
      out.write("      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\r\n");
      out.write("\r\n");
      out.write("    return title\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.getUID = function (prefix) {\r\n");
      out.write("    do prefix += ~~(Math.random() * 1000000)\r\n");
      out.write("    while (document.getElementById(prefix))\r\n");
      out.write("    return prefix\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.tip = function () {\r\n");
      out.write("    if (!this.$tip) {\r\n");
      out.write("      this.$tip = $(this.options.template)\r\n");
      out.write("      if (this.$tip.length != 1) {\r\n");
      out.write("        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    return this.$tip\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.arrow = function () {\r\n");
      out.write("    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.enable = function () {\r\n");
      out.write("    this.enabled = true\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.disable = function () {\r\n");
      out.write("    this.enabled = false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.toggleEnabled = function () {\r\n");
      out.write("    this.enabled = !this.enabled\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.toggle = function (e) {\r\n");
      out.write("    var self = this\r\n");
      out.write("    if (e) {\r\n");
      out.write("      self = $(e.currentTarget).data('bs.' + this.type)\r\n");
      out.write("      if (!self) {\r\n");
      out.write("        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\r\n");
      out.write("        $(e.currentTarget).data('bs.' + this.type, self)\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (e) {\r\n");
      out.write("      self.inState.click = !self.inState.click\r\n");
      out.write("      if (self.isInStateTrue()) self.enter(self)\r\n");
      out.write("      else self.leave(self)\r\n");
      out.write("    } else {\r\n");
      out.write("      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tooltip.prototype.destroy = function () {\r\n");
      out.write("    var that = this\r\n");
      out.write("    clearTimeout(this.timeout)\r\n");
      out.write("    this.hide(function () {\r\n");
      out.write("      that.$element.off('.' + that.type).removeData('bs.' + that.type)\r\n");
      out.write("      if (that.$tip) {\r\n");
      out.write("        that.$tip.detach()\r\n");
      out.write("      }\r\n");
      out.write("      that.$tip = null\r\n");
      out.write("      that.$arrow = null\r\n");
      out.write("      that.$viewport = null\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP PLUGIN DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.tooltip')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data && /destroy|hide/.test(option)) return\r\n");
      out.write("      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.tooltip\r\n");
      out.write("\r\n");
      out.write("  $.fn.tooltip             = Plugin\r\n");
      out.write("  $.fn.tooltip.Constructor = Tooltip\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TOOLTIP NO CONFLICT\r\n");
      out.write("  // ===================\r\n");
      out.write("\r\n");
      out.write("  $.fn.tooltip.noConflict = function () {\r\n");
      out.write("    $.fn.tooltip = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: popover.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#popovers\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // POPOVER PUBLIC CLASS DEFINITION\r\n");
      out.write("  // ===============================\r\n");
      out.write("\r\n");
      out.write("  var Popover = function (element, options) {\r\n");
      out.write("    this.init('popover', element, options)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\r\n");
      out.write("\r\n");
      out.write("  Popover.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\r\n");
      out.write("    placement: 'right',\r\n");
      out.write("    trigger: 'click',\r\n");
      out.write("    content: '',\r\n");
      out.write("    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // NOTE: POPOVER EXTENDS tooltip.js\r\n");
      out.write("  // ================================\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.constructor = Popover\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.getDefaults = function () {\r\n");
      out.write("    return Popover.DEFAULTS\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.setContent = function () {\r\n");
      out.write("    var $tip    = this.tip()\r\n");
      out.write("    var title   = this.getTitle()\r\n");
      out.write("    var content = this.getContent()\r\n");
      out.write("\r\n");
      out.write("    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\r\n");
      out.write("    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\r\n");
      out.write("      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\r\n");
      out.write("    ](content)\r\n");
      out.write("\r\n");
      out.write("    $tip.removeClass('fade top bottom left right in')\r\n");
      out.write("\r\n");
      out.write("    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\r\n");
      out.write("    // this manually by checking the contents.\r\n");
      out.write("    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.hasContent = function () {\r\n");
      out.write("    return this.getTitle() || this.getContent()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.getContent = function () {\r\n");
      out.write("    var $e = this.$element\r\n");
      out.write("    var o  = this.options\r\n");
      out.write("\r\n");
      out.write("    return $e.attr('data-content')\r\n");
      out.write("      || (typeof o.content == 'function' ?\r\n");
      out.write("            o.content.call($e[0]) :\r\n");
      out.write("            o.content)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Popover.prototype.arrow = function () {\r\n");
      out.write("    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // POPOVER PLUGIN DEFINITION\r\n");
      out.write("  // =========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.popover')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data && /destroy|hide/.test(option)) return\r\n");
      out.write("      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.popover\r\n");
      out.write("\r\n");
      out.write("  $.fn.popover             = Plugin\r\n");
      out.write("  $.fn.popover.Constructor = Popover\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // POPOVER NO CONFLICT\r\n");
      out.write("  // ===================\r\n");
      out.write("\r\n");
      out.write("  $.fn.popover.noConflict = function () {\r\n");
      out.write("    $.fn.popover = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: scrollspy.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#scrollspy\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY CLASS DEFINITION\r\n");
      out.write("  // ==========================\r\n");
      out.write("\r\n");
      out.write("  function ScrollSpy(element, options) {\r\n");
      out.write("    this.$body          = $(document.body)\r\n");
      out.write("    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\r\n");
      out.write("    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\r\n");
      out.write("    this.selector       = (this.options.target || '') + ' .nav li > a'\r\n");
      out.write("    this.offsets        = []\r\n");
      out.write("    this.targets        = []\r\n");
      out.write("    this.activeTarget   = null\r\n");
      out.write("    this.scrollHeight   = 0\r\n");
      out.write("\r\n");
      out.write("    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\r\n");
      out.write("    this.refresh()\r\n");
      out.write("    this.process()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.DEFAULTS = {\r\n");
      out.write("    offset: 10\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.getScrollHeight = function () {\r\n");
      out.write("    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.refresh = function () {\r\n");
      out.write("    var that          = this\r\n");
      out.write("    var offsetMethod  = 'offset'\r\n");
      out.write("    var offsetBase    = 0\r\n");
      out.write("\r\n");
      out.write("    this.offsets      = []\r\n");
      out.write("    this.targets      = []\r\n");
      out.write("    this.scrollHeight = this.getScrollHeight()\r\n");
      out.write("\r\n");
      out.write("    if (!$.isWindow(this.$scrollElement[0])) {\r\n");
      out.write("      offsetMethod = 'position'\r\n");
      out.write("      offsetBase   = this.$scrollElement.scrollTop()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.$body\r\n");
      out.write("      .find(this.selector)\r\n");
      out.write("      .map(function () {\r\n");
      out.write("        var $el   = $(this)\r\n");
      out.write("        var href  = $el.data('target') || $el.attr('href')\r\n");
      out.write("        var $href = /^#./.test(href) && $(href)\r\n");
      out.write("\r\n");
      out.write("        return ($href\r\n");
      out.write("          && $href.length\r\n");
      out.write("          && $href.is(':visible')\r\n");
      out.write("          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\r\n");
      out.write("      })\r\n");
      out.write("      .sort(function (a, b) { return a[0] - b[0] })\r\n");
      out.write("      .each(function () {\r\n");
      out.write("        that.offsets.push(this[0])\r\n");
      out.write("        that.targets.push(this[1])\r\n");
      out.write("      })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.process = function () {\r\n");
      out.write("    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\r\n");
      out.write("    var scrollHeight = this.getScrollHeight()\r\n");
      out.write("    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\r\n");
      out.write("    var offsets      = this.offsets\r\n");
      out.write("    var targets      = this.targets\r\n");
      out.write("    var activeTarget = this.activeTarget\r\n");
      out.write("    var i\r\n");
      out.write("\r\n");
      out.write("    if (this.scrollHeight != scrollHeight) {\r\n");
      out.write("      this.refresh()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (scrollTop >= maxScroll) {\r\n");
      out.write("      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (activeTarget && scrollTop < offsets[0]) {\r\n");
      out.write("      this.activeTarget = null\r\n");
      out.write("      return this.clear()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    for (i = offsets.length; i--;) {\r\n");
      out.write("      activeTarget != targets[i]\r\n");
      out.write("        && scrollTop >= offsets[i]\r\n");
      out.write("        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\r\n");
      out.write("        && this.activate(targets[i])\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.activate = function (target) {\r\n");
      out.write("    this.activeTarget = target\r\n");
      out.write("\r\n");
      out.write("    this.clear()\r\n");
      out.write("\r\n");
      out.write("    var selector = this.selector +\r\n");
      out.write("      '[data-target=\"' + target + '\"],' +\r\n");
      out.write("      this.selector + '[href=\"' + target + '\"]'\r\n");
      out.write("\r\n");
      out.write("    var active = $(selector)\r\n");
      out.write("      .parents('li')\r\n");
      out.write("      .addClass('active')\r\n");
      out.write("\r\n");
      out.write("    if (active.parent('.dropdown-menu').length) {\r\n");
      out.write("      active = active\r\n");
      out.write("        .closest('li.dropdown')\r\n");
      out.write("        .addClass('active')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    active.trigger('activate.bs.scrollspy')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  ScrollSpy.prototype.clear = function () {\r\n");
      out.write("    $(this.selector)\r\n");
      out.write("      .parentsUntil(this.options.target, '.active')\r\n");
      out.write("      .removeClass('active')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY PLUGIN DEFINITION\r\n");
      out.write("  // ===========================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.scrollspy')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.scrollspy\r\n");
      out.write("\r\n");
      out.write("  $.fn.scrollspy             = Plugin\r\n");
      out.write("  $.fn.scrollspy.Constructor = ScrollSpy\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY NO CONFLICT\r\n");
      out.write("  // =====================\r\n");
      out.write("\r\n");
      out.write("  $.fn.scrollspy.noConflict = function () {\r\n");
      out.write("    $.fn.scrollspy = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // SCROLLSPY DATA-API\r\n");
      out.write("  // ==================\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load.bs.scrollspy.data-api', function () {\r\n");
      out.write("    $('[data-spy=\"scroll\"]').each(function () {\r\n");
      out.write("      var $spy = $(this)\r\n");
      out.write("      Plugin.call($spy, $spy.data())\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: tab.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#tabs\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // TAB CLASS DEFINITION\r\n");
      out.write("  // ====================\r\n");
      out.write("\r\n");
      out.write("  var Tab = function (element) {\r\n");
      out.write("    // jscs:disable requireDollarBeforejQueryAssignment\r\n");
      out.write("    this.element = $(element)\r\n");
      out.write("    // jscs:enable requireDollarBeforejQueryAssignment\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tab.VERSION = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Tab.TRANSITION_DURATION = 150\r\n");
      out.write("\r\n");
      out.write("  Tab.prototype.show = function () {\r\n");
      out.write("    var $this    = this.element\r\n");
      out.write("    var $ul      = $this.closest('ul:not(.dropdown-menu)')\r\n");
      out.write("    var selector = $this.data('target')\r\n");
      out.write("\r\n");
      out.write("    if (!selector) {\r\n");
      out.write("      selector = $this.attr('href')\r\n");
      out.write("      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if ($this.parent('li').hasClass('active')) return\r\n");
      out.write("\r\n");
      out.write("    var $previous = $ul.find('.active:last a')\r\n");
      out.write("    var hideEvent = $.Event('hide.bs.tab', {\r\n");
      out.write("      relatedTarget: $this[0]\r\n");
      out.write("    })\r\n");
      out.write("    var showEvent = $.Event('show.bs.tab', {\r\n");
      out.write("      relatedTarget: $previous[0]\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    $previous.trigger(hideEvent)\r\n");
      out.write("    $this.trigger(showEvent)\r\n");
      out.write("\r\n");
      out.write("    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("    var $target = $(selector)\r\n");
      out.write("\r\n");
      out.write("    this.activate($this.closest('li'), $ul)\r\n");
      out.write("    this.activate($target, $target.parent(), function () {\r\n");
      out.write("      $previous.trigger({\r\n");
      out.write("        type: 'hidden.bs.tab',\r\n");
      out.write("        relatedTarget: $this[0]\r\n");
      out.write("      })\r\n");
      out.write("      $this.trigger({\r\n");
      out.write("        type: 'shown.bs.tab',\r\n");
      out.write("        relatedTarget: $previous[0]\r\n");
      out.write("      })\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Tab.prototype.activate = function (element, container, callback) {\r\n");
      out.write("    var $active    = container.find('> .active')\r\n");
      out.write("    var transition = callback\r\n");
      out.write("      && $.support.transition\r\n");
      out.write("      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\r\n");
      out.write("\r\n");
      out.write("    function next() {\r\n");
      out.write("      $active\r\n");
      out.write("        .removeClass('active')\r\n");
      out.write("        .find('> .dropdown-menu > .active')\r\n");
      out.write("          .removeClass('active')\r\n");
      out.write("        .end()\r\n");
      out.write("        .find('[data-toggle=\"tab\"]')\r\n");
      out.write("          .attr('aria-expanded', false)\r\n");
      out.write("\r\n");
      out.write("      element\r\n");
      out.write("        .addClass('active')\r\n");
      out.write("        .find('[data-toggle=\"tab\"]')\r\n");
      out.write("          .attr('aria-expanded', true)\r\n");
      out.write("\r\n");
      out.write("      if (transition) {\r\n");
      out.write("        element[0].offsetWidth // reflow for transition\r\n");
      out.write("        element.addClass('in')\r\n");
      out.write("      } else {\r\n");
      out.write("        element.removeClass('fade')\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      if (element.parent('.dropdown-menu').length) {\r\n");
      out.write("        element\r\n");
      out.write("          .closest('li.dropdown')\r\n");
      out.write("            .addClass('active')\r\n");
      out.write("          .end()\r\n");
      out.write("          .find('[data-toggle=\"tab\"]')\r\n");
      out.write("            .attr('aria-expanded', true)\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      callback && callback()\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $active.length && transition ?\r\n");
      out.write("      $active\r\n");
      out.write("        .one('bsTransitionEnd', next)\r\n");
      out.write("        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\r\n");
      out.write("      next()\r\n");
      out.write("\r\n");
      out.write("    $active.removeClass('in')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB PLUGIN DEFINITION\r\n");
      out.write("  // =====================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this = $(this)\r\n");
      out.write("      var data  = $this.data('bs.tab')\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.tab', (data = new Tab(this)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.tab\r\n");
      out.write("\r\n");
      out.write("  $.fn.tab             = Plugin\r\n");
      out.write("  $.fn.tab.Constructor = Tab\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB NO CONFLICT\r\n");
      out.write("  // ===============\r\n");
      out.write("\r\n");
      out.write("  $.fn.tab.noConflict = function () {\r\n");
      out.write("    $.fn.tab = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // TAB DATA-API\r\n");
      out.write("  // ============\r\n");
      out.write("\r\n");
      out.write("  var clickHandler = function (e) {\r\n");
      out.write("    e.preventDefault()\r\n");
      out.write("    Plugin.call($(this), 'show')\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(document)\r\n");
      out.write("    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\r\n");
      out.write("    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\r\n");
      out.write("/* ========================================================================\r\n");
      out.write(" * Bootstrap: affix.js v3.3.6\r\n");
      out.write(" * http://getbootstrap.com/javascript/#affix\r\n");
      out.write(" * ========================================================================\r\n");
      out.write(" * Copyright 2011-2015 Twitter, Inc.\r\n");
      out.write(" * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n");
      out.write(" * ======================================================================== */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("+function ($) {\r\n");
      out.write("  'use strict';\r\n");
      out.write("\r\n");
      out.write("  // AFFIX CLASS DEFINITION\r\n");
      out.write("  // ======================\r\n");
      out.write("\r\n");
      out.write("  var Affix = function (element, options) {\r\n");
      out.write("    this.options = $.extend({}, Affix.DEFAULTS, options)\r\n");
      out.write("\r\n");
      out.write("    this.$target = $(this.options.target)\r\n");
      out.write("      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\r\n");
      out.write("      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\r\n");
      out.write("\r\n");
      out.write("    this.$element     = $(element)\r\n");
      out.write("    this.affixed      = null\r\n");
      out.write("    this.unpin        = null\r\n");
      out.write("    this.pinnedOffset = null\r\n");
      out.write("\r\n");
      out.write("    this.checkPosition()\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.VERSION  = '3.3.6'\r\n");
      out.write("\r\n");
      out.write("  Affix.RESET    = 'affix affix-top affix-bottom'\r\n");
      out.write("\r\n");
      out.write("  Affix.DEFAULTS = {\r\n");
      out.write("    offset: 0,\r\n");
      out.write("    target: window\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\r\n");
      out.write("    var scrollTop    = this.$target.scrollTop()\r\n");
      out.write("    var position     = this.$element.offset()\r\n");
      out.write("    var targetHeight = this.$target.height()\r\n");
      out.write("\r\n");
      out.write("    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\r\n");
      out.write("\r\n");
      out.write("    if (this.affixed == 'bottom') {\r\n");
      out.write("      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\r\n");
      out.write("      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var initializing   = this.affixed == null\r\n");
      out.write("    var colliderTop    = initializing ? scrollTop : position.top\r\n");
      out.write("    var colliderHeight = initializing ? targetHeight : height\r\n");
      out.write("\r\n");
      out.write("    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\r\n");
      out.write("    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\r\n");
      out.write("\r\n");
      out.write("    return false\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.getPinnedOffset = function () {\r\n");
      out.write("    if (this.pinnedOffset) return this.pinnedOffset\r\n");
      out.write("    this.$element.removeClass(Affix.RESET).addClass('affix')\r\n");
      out.write("    var scrollTop = this.$target.scrollTop()\r\n");
      out.write("    var position  = this.$element.offset()\r\n");
      out.write("    return (this.pinnedOffset = position.top - scrollTop)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.checkPositionWithEventLoop = function () {\r\n");
      out.write("    setTimeout($.proxy(this.checkPosition, this), 1)\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  Affix.prototype.checkPosition = function () {\r\n");
      out.write("    if (!this.$element.is(':visible')) return\r\n");
      out.write("\r\n");
      out.write("    var height       = this.$element.height()\r\n");
      out.write("    var offset       = this.options.offset\r\n");
      out.write("    var offsetTop    = offset.top\r\n");
      out.write("    var offsetBottom = offset.bottom\r\n");
      out.write("    var scrollHeight = Math.max($(document).height(), $(document.body).height())\r\n");
      out.write("\r\n");
      out.write("    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\r\n");
      out.write("    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\r\n");
      out.write("    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\r\n");
      out.write("\r\n");
      out.write("    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\r\n");
      out.write("\r\n");
      out.write("    if (this.affixed != affix) {\r\n");
      out.write("      if (this.unpin != null) this.$element.css('top', '')\r\n");
      out.write("\r\n");
      out.write("      var affixType = 'affix' + (affix ? '-' + affix : '')\r\n");
      out.write("      var e         = $.Event(affixType + '.bs.affix')\r\n");
      out.write("\r\n");
      out.write("      this.$element.trigger(e)\r\n");
      out.write("\r\n");
      out.write("      if (e.isDefaultPrevented()) return\r\n");
      out.write("\r\n");
      out.write("      this.affixed = affix\r\n");
      out.write("      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\r\n");
      out.write("\r\n");
      out.write("      this.$element\r\n");
      out.write("        .removeClass(Affix.RESET)\r\n");
      out.write("        .addClass(affixType)\r\n");
      out.write("        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (affix == 'bottom') {\r\n");
      out.write("      this.$element.offset({\r\n");
      out.write("        top: scrollHeight - height - offsetBottom\r\n");
      out.write("      })\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX PLUGIN DEFINITION\r\n");
      out.write("  // =======================\r\n");
      out.write("\r\n");
      out.write("  function Plugin(option) {\r\n");
      out.write("    return this.each(function () {\r\n");
      out.write("      var $this   = $(this)\r\n");
      out.write("      var data    = $this.data('bs.affix')\r\n");
      out.write("      var options = typeof option == 'object' && option\r\n");
      out.write("\r\n");
      out.write("      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\r\n");
      out.write("      if (typeof option == 'string') data[option]()\r\n");
      out.write("    })\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var old = $.fn.affix\r\n");
      out.write("\r\n");
      out.write("  $.fn.affix             = Plugin\r\n");
      out.write("  $.fn.affix.Constructor = Affix\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX NO CONFLICT\r\n");
      out.write("  // =================\r\n");
      out.write("\r\n");
      out.write("  $.fn.affix.noConflict = function () {\r\n");
      out.write("    $.fn.affix = old\r\n");
      out.write("    return this\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  // AFFIX DATA-API\r\n");
      out.write("  // ==============\r\n");
      out.write("\r\n");
      out.write("  $(window).on('load', function () {\r\n");
      out.write("    $('[data-spy=\"affix\"]').each(function () {\r\n");
      out.write("      var $spy = $(this)\r\n");
      out.write("      var data = $spy.data()\r\n");
      out.write("\r\n");
      out.write("      data.offset = data.offset || {}\r\n");
      out.write("\r\n");
      out.write("      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\r\n");
      out.write("      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\r\n");
      out.write("\r\n");
      out.write("      Plugin.call($spy, data)\r\n");
      out.write("    })\r\n");
      out.write("  })\r\n");
      out.write("\r\n");
      out.write("}(jQuery);\r\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write(" <script type=\"text/javascript\">\n");
      out.write("       \n");
      out.write("    function notify_date(){\n");
      out.write("        var value;\n");
      out.write("        var db;\n");
      out.write("          $.ajax({\n");
      out.write("              url:'Date.jsp',\n");
      out.write("              success:function(data){\n");
      out.write("                    $('.date').html(data);\n");
      out.write("                  //  db=document.getElementById(\"db\").value;\n");
      out.write("                    value=document.getElementById(\"value\").value;   \n");
      out.write("//                 \n");
      out.write("                      \n");
      out.write("                     \n");
      out.write("                    \n");
      out.write("                },\n");
      out.write("        complete:function(){\n");
      out.write("                          if(value>=59){\n");
      out.write("                              window.location.replace(\"contestant.jsp\");\n");
      out.write("                        }\n");
      out.write("                        else{\n");
      out.write("                            setTimeout(notify_date(),2000);\n");
      out.write("                 }\n");
      out.write("                 }\n");
      out.write("                  });\n");
      out.write("              }\n");
      out.write("                            \n");
      out.write("            \n");
      out.write("          </script>\n");
      out.write("   \n");
      out.write("<style>\n");
      out.write("            \n");
      out.write("                ul {\n");
      out.write("                    list-style-type: none;\n");
      out.write("                    margin: 0;\n");
      out.write("                    padding: 0;\n");
      out.write("                    overflow: hidden;\n");
      out.write("                    background-color:#12436d;\n");
      out.write("                    position: fixed;\n");
      out.write("                    width: 100%;\n");
      out.write("                } \n");
      out.write("                li {\n");
      out.write("                    float: left;\n");
      out.write("                    border-right:1px solid #bbb;\n");
      out.write("                  \n");
      out.write("                }\n");
      out.write("                li a {\n");
      out.write("                    display: block;\n");
      out.write("                    color: white;\n");
      out.write("                    text-align: center;\n");
      out.write("                    padding: 14px 16px;\n");
      out.write("                    text-decoration: none;\n");
      out.write("                }\n");
      out.write("                li a:hover {\n");
      out.write("                    background-color: #185890;\n");
      out.write("                }\n");
      out.write("                li.a:active {\n");
      out.write("                      background-color:darkorchid;\n");
      out.write("                }\n");
      out.write("             .header{margin-right:10px;  padding:none; width:100%; }\n");
      out.write("\n");
      out.write("            \n");
      out.write("            .website_name{height:80px; width:100%; margin:auto; background-color:#165083;  position: fixed;\n");
      out.write("                         padding-top:10px; color:burlywood; text-align:center;}\n");
      out.write("            .footer{height:90px; width:100%; margin:auto; color:lightgrey; padding-top:5px; padding-bottom:20px;  background-color:darkmagenta; text-align:center;}\n");
      out.write("            \n");
      out.write("        </style>\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("        \n");
      out.write("</head>\n");
      out.write("        \n");
      out.write("   \n");
      out.write("<body onload=\"notify_date()\">\n");
      out.write("        \n");
      out.write("           \n");
      out.write("            <div class=\"header\"> \n");
      out.write("            <div class=\"website_name\" ><h1>Online voting portal</h1>\n");
      out.write("    \n");
      out.write("            <ul class=\"nav nav-tabs\">\n");
      out.write("               \n");
      out.write("                 <li><a  href=\"contestant.jsp\"><span class=\"glyphicon glyphicon-home\"></span>&nbsp; Home</a></li>\n");
      out.write("               \n");
      out.write("         \n");
      out.write("                       \n");
      out.write("                \n");
      out.write("           \n");
      out.write("           \n");
      out.write(" <div id=\"voter\"> <li ><a href=\"home1.jsp\"><span class=\"glyphicon glyphicon-hand-up\"></span>&nbsp;Vote</a></li></div>\n");
      out.write("            <li ><a href=\"addContestant.jsp\"><span class=\"glyphicon glyphicon-earphone\"></span>&nbsp;Contact</a></li>\n");
      out.write("            <li ><a href=\"#about\"><span class=\"glyphicon glyphicon-heart-empty\"></span>&nbsp;About Us</a></li>\n");
      out.write("            <li style=\"float:right;\"><div class=\"date\"></div></li>\n");
      out.write("           \n");
      out.write("            </ul>\n");
      out.write("            </div>\n");
      out.write("             </div>    \n");
      out.write("        \n");
      out.write("            \n");
      out.write("       \n");
      out.write("    </body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("        <div class=\"main\">\n");
      out.write("            \n");
      out.write("            <br>\n");
      out.write("            <div class=\"right\" >\n");
      out.write("               <center> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${mnotlogin}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("<center>\n");
      out.write("               \n");
      out.write("               \n");
      out.write("\n");
      out.write("   \n");
      out.write("            <form action=\"vlogin\" role=\"form\" method=\"post\">\n");
      out.write("                  <input type=\"hidden\" name=\"page\" value=\"VoterForm\">\n");
      out.write("                 \n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"usrname\"><span class=\"glyphicon glyphicon-user\"></span>Voter_id</label>\n");
      out.write("              <input type=\"text\" class=\"form-control\" name=\"voter_id\" placeholder=\"voter_id\">\n");
      out.write("            </div>\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("              <label for=\"psw\"><span class=\"glyphicon glyphicon-eye-open\"></span>Citizenship</label>\n");
      out.write("              <input type=\"password\" class=\"form-control\" name=\"citizenship\" placeholder=\"Citizenship_no.\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("                   \n");
      out.write("            \n");
      out.write("                  \n");
      out.write("              <button type=\"submit\" class=\"btn btn-primary btn-block\"><span class=\"glyphicon glyphicon-off\"></span> Login</button>\n");
      out.write("          </form>\n");
      out.write("        \n");
      out.write("       \n");
      out.write("         \n");
      out.write("       \n");
      out.write("      </div>\n");
      out.write("       </div>\n");
      out.write("    </div>\n");
      out.write(" </div>\n");
      out.write("            <div class=\"right2\">\n");
      out.write("                <center> \"Ballot is stronger than bullet\".<br><br> \"your VOTE is your VOICE\".<br><br> \"If you don't VOTE\n");
      out.write("                    you lose the right to complain\".<br>\n");
      out.write("                </center> \n");
      out.write("            </div>\n");
      out.write("       \n");
      out.write("       \n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
